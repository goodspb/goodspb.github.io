<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在CentOS 6.5 中安装 GCC 4.8]]></title>
    <url>%2F2018%2F05%2F21%2F%E5%9C%A8CentOS-6.5-%E4%B8%AD%E5%AE%89%E8%A3%85-GCC-4.8%2F</url>
    <content type="text"><![CDATA[因为最近使用 Dlib，要求使用 C++11，所以必须在 Centos 6.5上使用 gcc 4.8 以上版本，因此记录一下安装的过程: 1234cd /etc/yum.repos.dwget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repoyum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++scl enable devtoolset-2 bash]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[php5扩展迁移php7扩展]]></title>
    <url>%2F2018%2F04%2F01%2Fphp5%E6%89%A9%E5%B1%95%E8%BF%81%E7%A7%BBphp7%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[记录一下PHP5扩展升级到PHP7扩展的一些点，覆盖十分不全，只是自己在工作中的遇到项目的一些改动。 1, zend_hash_get_current_data_exphp5 定义： 1ZEND_API int zend_hash_get_current_data_ex(HashTable *ht, void **pData, HashPosition *pos) php7 定义： 1ZEND_API zval* ZEND_FASTCALL zend_hash_get_current_data_ex(HashTable *ht, HashPosition *pos) 也就是说，php5的时候，是传递指针获取data的，但是到php7的时候，已经变成通过直接返回获取的data了。 修改方法：12zval **tmp;zend_hash_get_current_data_ex(ht, tmp, pos) 变成： 12zval *tmp;tmp = zend_hash_get_current_data_ex(ht, pos) 2, zend_hash_get_current_key_exphp5 定义： 1ZEND_API int zend_hash_get_current_key_ex(const HashTable *ht, char **str_index, uint *str_length, ulong *num_index, zend_bool duplicate, HashPosition *pos) php7 定义： 1ZEND_API int ZEND_FASTCALL zend_hash_get_current_key_ex(const HashTable *ht, zend_string **str_index, zend_ulong *num_index, HashPosition *pos) 这里的最大出入是php7当中将zend_string 替换 char ， zend_ulong 替换 ulong 了，所以需要注意定义的时候需要更换。 还需要注意的是： A, 去除参数 zend_bool duplicate ，表示是否去除最后的字符。 B, 去除参数 uint *str_length ，因为 zend_string 里面已经包含字符的长度。 3, zend_uintphp7已经将这个宏去掉了，但是其实php5当中的定义只是简单的： 1typedef unsigned int zend_uint; 所以，如果你的扩展用到了，可以直接替换为 uint 4，zend_hash_apply、zend_hash_apply_with_argument、zend_hash_apply_with_arguments这三个函数是将一个 HashTable 迭代的方法，再看他们后缀的不同，大家也是可以知道这3个函数其实性质一样，就是传不传参数的差别而已。还是直接用例子来说明： php5:1zend_hash_apply(EG(function_table), (apply_func_t) zend_cleanup_function_data_full TSRMLS_CC); 其中，zend_cleanup_function_data_full 是一个回调的函数，函数定义： 1234567ZEND_API int zend_cleanup_function_data_full(zend_function *function TSRMLS_DC)&#123; if (function-&gt;type == ZEND_USER_FUNCTION) &#123; zend_cleanup_op_array_data((zend_op_array *) function); &#125; return 0;&#125; 大家可以看到，这里传入的参数是 `zend_function *function` ，也就是说 php5 的HashTable是直接储存实体的。再看看php7的。 php7:1zend_hash_apply(ht, (apply_func_t) is_not_internal_function); 然后再看回调函数 `is_not_internal_function` : 12345static int is_not_internal_function(zval *zv)&#123; zend_function *function = Z_PTR_P(zv); return(function-&gt;type != ZEND_INTERNAL_FUNCTION);&#125; 这个时候的回调函数传入的参数是一个 zval 的指针，假如需要获得内容，我们需要使用宏 ：Z_PTR_P 。 当然，还有基本的，可以直接查看官网： https://wiki.php.net/phpng-upgrading]]></content>
      <categories>
        <category>PHP扩展开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Centos 6.5 下编译安装 php7.2.4]]></title>
    <url>%2F2018%2F03%2F21%2FCentos-6.5-%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-php7.2.4%2F</url>
    <content type="text"><![CDATA[公司服务器还是处于centos6.5的版本，因此，最近在改php扩展的时候，还是需要先在 centos6 下测试一下插件，所以搞了个虚拟机安装起 centos , 在编译一下 php7.2 的源码，期间遇到的问题都记录一下。 一、安装各种依赖：12yum -y install libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel pcre-devel curl-devel yum -y install libxslt-devel libmcrypt-devel gd-devel openssl openssl-devel bison cyrus-sasl-devel git 二、下载源码123wget -c https://github.com/php/php-src/archive/php-7.2.4.tar.gztar -zxf php-7.2.4.tar.gzcd php-src-7.2.4 三、编译参数1234./buildconf./configure --with-openssl --with-mysqli --with-pdo-mysql --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --enable-session --with-curl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm --with-fpm-user=www --with-fpm-group=www --without-gdbm --with-pcre-regex --with-png-dir --enable-fileinfo --enable-debugmakesudo make install 四、常用插件安装1、redis:1pecl install redis 2、memcached:先安装 memcached: 123456wget http://memcached.org/files/memcached-1.5.7.tar.gztar -zxf memcached-1.5.7.tar.gzcd memcached-1.5.7./configure makesudo make install 在安装php-memcaced扩展： 1234567wget -c https://pecl.php.net/get/memcached-3.0.4.tgztar -zxf memcached-3.0.4.tgzcd memcached-3.0.4phpize./configuremakesudo make install 3、swoole:1pecl install swoole 五、配置 php因为从源码安装的php没有自动放置好 php.ini 文件，所以，我们需要从源码文件夹中复制： 12cd php-src-7.2.4cp php.ini.production /usr/local/lib/php.ini 然后我们就可以配置php.ini 加入以上扩展了，`vim /usr/local/lib/php.ini` 然后在文件尾加入： 123extension=redis.soextension=swoole.soextension=memcached.so 六、检查php确认php版本 php -v 确认读取的 php.ini 文件的位置： php -i | grep php.ini 检查已经安装的插件 php -m]]></content>
      <categories>
        <category>Linux/Unix</category>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux日志查看常用命令大全]]></title>
    <url>%2F2018%2F03%2F03%2FLinux%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[1、cat命令：功能：1）显示整个文件。 示例： $ cat fileName 2）把文件串连接后传到基本输出，如将几个文件合并为一个文件或输出到屏幕。 示例： $ cat file1 file2 &gt; file 说明：把档案串连接后传到基本输出(屏幕或加 &gt; fileName 到另一个档案) cat参数详解： -n 或 –number 由 1 开始对所有输出的行数编号 -b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号 -s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行 -v 或 –show-nonprinting 2、more命令：以百分比的形式查看日志。 参数说明： +n 从笫n行开始显示 -n 定义屏幕大小为n行 +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示 -d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能 -l 忽略Ctrl+l（换页）字符 -p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似 -s 把连续的多个空行显示为一行 -u 把文件内容中的下画线去掉 3、less命令：less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。 参数说明： /字符串：向下搜索“字符串”的功能 ?字符串：向上搜索“字符串”的功能 n：重复前一个搜索（与 / 或 ? 有关） N：反向重复前一个搜索（与 / 或 ? 有关） 4、head命令：功能：从文本文件的头部开始查看，head 命令用于查看一个文本文件的开头部分。 示例如下： head example.txt 显示文件 example.txt 的前十行内容； head -n 20 example.txt 显示文件 example.txt 的前二十行内容； head详解： -n 指定你想要显示文本多少行。 -n number 这个参数选项必须是十进制的整数，它将决定在文件中的位置，以行为单位。 -c number 这个参数选项必须是十进制的整数，它将决定在文件中的位置，以字节为单位。 5、tail命令：功能：tail 命令用于显示文本文件的末尾几行。 示例如下： tail example.txt 显示文件 example.txt 的后十行内容； tail -n 20 example.txt 显示文件 example.txt 的后二十行内容； tail -f example.txt 显示文件 example.txt 的后十行内容并在文件内容增加后，自动显示新增的文件内容。 tail -n 50 -f example.txt 显示文件 example.txt 的后50行内容并在文件内容增加后，自动显示新增的文件内容。 注意： 最后一条命令非常有用，尤其在监控日志文件时，可以在屏幕上一直显示新增的日志信息。 参数说明： -b Number 从 Number 变量表示的 512 字节块位置开始读取指定文件。 -c Number 从 Number 变量表示的字节位置开始读取指定文件。 -f 如果输入文件是常规文件或如果 File 参数指定 FIFO（先进先出）， 那么 tail 命令不会在复制了输入文件的最后的指定单元后终止，而是继续 从输入文件读取和复制额外的单元（当这些单元可用时）。如果没有指定 File 参数， 并且标准输入是管道，则会忽略 -f 标志。tail -f 命令可用于监视另一个进程正在写入的文件的增长。 -k Number 从 Number 变量表示的 1KB 块位置开始读取指定文件。 -m Number 从 Number 变量表示的多字节字符位置开始读取指定文件。使用该标志提供在单字节和双字节字符代码集环境中的一致结果。 -n Number 从首行或末行位置来读取指定文件，位置由 Number 变量的符号（+ 或 - 或无）表示，并通过行号 Number 进行位移。 -r 从文件末尾以逆序方式显示输出。-r 标志的缺省值是以逆序方式显示整个文件。如果文件大于 20,480 字节，那么-r标志只显示最后的 20,480 字节。 -r 标志只有 与 -n 标志一起时才有效。否则，就会将其忽略。 6、wc 命令该命令统计给定文件中的字节数、字数、行数。 参数说明： - c 统计字节数。 - l 统计行数。 - w 统计字数。 7、uniq 命令uniq可检查文本文件中重复出现的行列。 参数说明： -c或–count 在每列旁边显示该行重复出现的次数。 -d或–repeated 仅显示重复出现的行列。 -f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt; 忽略比较指定的栏位。 -s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt; 忽略比较指定的字符。 -u或–unique 仅显示出一次的行列。 -w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt; 指定要比较的字符。 –help 显示帮助。 –version 显示版本信息。 8、awk 命令可以说的上是查看命令的终极武器，是一个强大的文本分析工具。但是使用起来相对复杂啦，等于在使用一个编程语言一样了。所以，以下只能使用一些实例来说明awk命令是如何使用的了。awk 在命令行是怎么使用的呢？ awk [-F field-separator] ‘commands’ input-file(s)其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。 实例说明：假设last -n 5的输出如下 [root@www ~]# last -n 5 &lt;==仅取出前五行root pts/1 192.168.1.100 Tue Feb 10 11:21 still logged inroot pts/1 192.168.1.100 Tue Feb 10 00:46 - 02:28 (01:41)root pts/1 192.168.1.100 Mon Feb 9 11:41 - 18:30 (06:48)dmtsai pts/1 192.168.1.100 Mon Feb 9 11:41 - 11:41 (00:00)root tty1 Fri Sep 5 14:09 - 14:10 (00:01) 如果只是显示最近登录的5个帐号 #last -n 5 | awk ‘{print $1}’rootrootrootdmtsairoot awk工作流程是这样的：读入有’\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。 如果只是显示/etc/passwd的账户 #cat /etc/passwd |awk -F ‘:’ ‘{print $1}’rootdaemonbinsys 这种是awk+action的示例，每行都会执行action{print $1}。 -F指定域分隔符为’:’。 如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割 #cat /etc/passwd |awk -F ‘:’ ‘{print $1”\t”$7}’root /bin/bashdaemon /bin/shbin /bin/shsys /bin/sh 如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”。 cat /etc/passwd |awk -F ‘:’ ‘BEGIN {print “name,shell”} {print $1”,”$7} END {print “blue,/bin/nosh”}’name,shellroot,/bin/bashdaemon,/bin/shbin,/bin/shsys,/bin/sh….blue,/bin/nosh awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。 搜索/etc/passwd有root关键字的所有行 #awk -F: ‘/root/‘ /etc/passwdroot:x:0:0:root:/root:/bin/bash 这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。 搜索支持正则，例如找root开头的: awk -F: ‘/^root/‘ /etc/passwd 搜索/etc/passwd有root关键字的所有行，并显示对应的shell # awk -F: ‘/root/{print $7}’ /etc/passwd/bin/bash 这里指定了action{print $7} awk内置变量awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。 ARGC 命令行参数个数ARGV 命令行参数排列ENVIRON 支持队列中系统环境变量的使用FILENAME awk浏览的文件名FNR 浏览文件的记录数FS 设置输入域分隔符，等价于命令行 -F选项NF 浏览记录的域的个数NR 已读的记录数OFS 输出域分隔符ORS 输出记录分隔符RS 控制记录分隔符 此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。 统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容: #awk -F ‘:’ ‘{print “filename:” FILENAME “,linenumber:” NR “,columns:” NF “,linecontent:”$0}’ /etc/passwdfilename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bashfilename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/shfilename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/shfilename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh 使用printf替代print,可以让代码更加简洁，易读 awk -F ‘:’ ‘{printf(“filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n”,FILENAME,NR,NF,$0)}’ /etc/passwd print和printfawk中同时提供了print和printf两种打印输出的函数。 其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。 printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。 更多说明http://www.gnu.org/software/gawk/manual/gawk.html]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018门罗币XMR挖矿教程]]></title>
    <url>%2F2018%2F02%2F28%2F2018%E9%97%A8%E7%BD%97%E5%B8%81XMR%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言挖矿这种东西，其实什么时候都十分讲求时效性，这段时间尝试了一下用CPU来挖门罗币（XMR），可谓惨惨惨，先放一下战绩： 是的，你并没有看错，这大概是挖了4天的成功，我连矿池的手续费都为挖出来，泪目( Ĭ ^ Ĭ )……当然，我不是说我现在挖门罗币没有收益，我这个仅仅是开着玩而已，CPU挖起来十分费力，算力跟不上真正的显卡矿机。具体的显卡矿机的算力后面给出。 准备钱包当然，开始挖矿之前，我们需要一个门罗币的钱包，强烈推荐还是使用官方出品吧。主要是个人有点洁癖，不太放心在线的钱包。官网地址：https://getmonero.org/downloads/ 。根据不同的系统环境，选择对应不同的GUI安装包，支持的系统有： Windows, 64-bit Windows, 32-bit Mac OS X, 64-bit Linux, 64-bit Linux, 32-bit 本文以 windows 64位系统为例，下载完后，双击安装： 1. 选择语言 2. 然后点击创建一个新的钱包 3. 记录种子码 4. 添加钱包密码 最后，同步完区块之后，你就可以点击“收款”按钮，然后找到自己的钱包地址了： 得到钱包地址之后，我们就可以开始挖矿了。 获取矿池信息想要挖矿，我们必须知道矿池地址，至于什么是矿池，你们需要自行搜索了。这里我们推荐：http://minexmr.com 。点击 “Getting Started”， 我们可以获取到一下信息： 1. 矿池地址：欧洲 (法国, 德国): pool.minexmr.com 法国: fr.minexmr.com 德国: de.minexmr.com 加拿大: ca.minexmr.com 新加坡: sg.minexmr.com 这里我们选择离我们最近的新加坡：sg.minexmr.com 2. 矿池端口：4444,5555, 7777, 80, 443,3333,6666 其中，端口和你拥有的算力有一定的关系，这里我们选择最低难度的 4444 或者 5555。 获取挖矿软件挖矿的话，当然少不了挖矿的软件了，我们这里选择：xmr-stak，算是当前挖门罗币效率最高的软件了，github 地址：[https://github.com/fireice-uk/xmr-stak](https://github.com/fireice-uk/xmr-stak)， windows 版下载地址：[https://github.com/fireice-uk/xmr-stak/releases/download/v2.2.0/xmr-stak-win64.zip](https://github.com/fireice-uk/xmr-stak/releases/download/v2.2.0/xmr-stak-win64.zip) ，使用十分简单，下载完成后会出现以下5个文件： 双击文件 xmr-stak.exe 即可，按照提示分别输入： monero sg.minexmr.com:4444 你的钱包地址 x N n n 然后就可以开始挖矿咯。最后，你当然希望可以看到现在自己实时的收益，就好像文章开头我那图片一样，可以点击：http://minexmr.com/#worker_stats，输入你的钱包地址就可以看到自己实时的收益了。 关于算力、收益大家看到我现在的收益图也可以看出，我CPU的算力只有大概 100H/s，而且十分不稳定，当然，假如你用的是显卡矿机，例如 1060 6G * 6 这样的话，一张显卡的算力大概在 400 - 500 H/s ，那6张显卡就是 3000 了，收益是我现在30倍，减去电费和矿池的手续费(0.004XMR)，收益还是还是相当可观的，加上升值的话，可能收益更大。 但是，投资有风险，入市需谨慎啊朋友们。]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP扩展开发（3）- 创建类class]]></title>
    <url>%2F2018%2F02%2F15%2FPHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89--%E5%88%9B%E5%BB%BA%E7%B1%BBclass%2F</url>
    <content type="text"><![CDATA[当然了，现代编程语言当然少不了 类(Class) 这种元素，这一篇我们来看一下如何在PHP扩展中创建一个类。 一、前言要完成一个任务，我们需要订立一个目标。实际上，我们需要在扩展中实现的类就像下面我们在PHP当中实现的类一样，包含构造函数，属性，方法等。 123456789101112131415161718192021222324252627282930&lt;?phpClass Car()&#123; protect $driver; public function __construct() &#123; &#125; public function setDriver($driver) &#123; $this-&gt;driver = $driver; &#125; public function run() &#123; return sprintf("%s is driving the car.", $this-&gt;driver); &#125;&#125;$car = new Car();$car-&gt;setDriver("Goodspb");echo $car-&gt;run();/*输出:Goodspb is driving the car. */ 分析一下： 类名：Car 属性：driver 方法：run 二、声明类如何创建一个扩展这里就不说了，具体可以参考《PHP扩展开发（1）-初识扩展》是如何创建一个扩展的，这次我们创建一个名叫：hello_class 的扩展，主要包含头文件： hello_class.h 头文件和 hello_class.c 。我们在 hello_class.h 中添加类的声明。 在 hello_class.h 的尾部添加： 12345/* Class Car */zend_class_entry *car_ce; //定义全局的类结构PHP_METHOD(Car, __construct); //声明构造函数PHP_METHOD(Car, setDriver); //声明方法PHP_METHOD(Car, run); //声明方法 三、实现类在 hello_class.c 中添加： 12345678910111213141516171819202122232425262728293031323334353637/* class Car */ZEND_BEGIN_ARG_INFO(arg_car_setDriver, 0) ZEND_ARG_INFO(0, driver)ZEND_END_ARG_INFO() const zend_function_entry car_methods[] = &#123; /* Class Car */ PHP_ME(Car, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR) PHP_ME(Car, run, NULL, ZEND_ACC_PUBLIC) PHP_ME(Car, setDriver, arg_car_setDriver, ZEND_ACC_PUBLIC) PHP_FE_END /* Must be the last line in hello_class_functions[] */&#125;; PHP_METHOD(Car, __construct)&#123; &#125; PHP_METHOD(Car, setDriver)&#123; zend_string *driver; ZEND_PARSE_PARAMETERS_START(1, 1) Z_PARAM_STR(driver) ZEND_PARSE_PARAMETERS_END(); zend_update_property_string(car_ce, getThis(), "driver", sizeof("driver") - 1, ZSTR_VAL(driver));&#125; PHP_METHOD(Car, run)&#123; zval *driver, rdriver; zend_string *driver_string; driver = zend_read_property(car_ce, getThis(), "driver", sizeof("driver") - 1, 0, &amp;rdriver); driver_string = Z_STR_P(driver); RETURN_STR(strpprintf(0, "%s is driving the car.", ZSTR_VAL(driver_string)));&#125; 这样就实现类了，我们来分解一下代码： 1). 这段是对函数 setDriver 配置参数:123ZEND_BEGIN_ARG_INFO(arg_car_setDriver, 0) //第一个参数为配置名，用于后面填充；第二参数默认为0，暂无使用 ZEND_ARG_INFO(0, driver) //第一个参数表示是否传递引用，0表示否，1表示是；第二个参数表示参数名ZEND_END_ARG_INFO() 2). 这段是新建一个方法的入口：1234567const zend_function_entry car_methods[] = &#123; /* Class Car */ PHP_ME(Car, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR) PHP_ME(Car, run, NULL, ZEND_ACC_PUBLIC) PHP_ME(Car, setDriver, arg_car_setDriver, ZEND_ACC_PUBLIC) PHP_FE_END /* Must be the last line in hello_class_functions[] */&#125;; 增加类方法： 1PHP_ME(Car, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR) 第一个参数为：类名 第二个参数为方法名 第三个参数为参数结构体，例如上面我们新建的 arg_car_setDriver 第四个参数为属性的掩码，例如上面的 ZEND_ACC_PUBLIC | ZEND_ACC_CTOR 表示该方法为 public 且为 构造函数 关于第四个参数，定义有以下这些，大家看到最后的单词估计也能猜测得到。 12345678910111213141516171819202122232425262728293031323334353637383940414243/* method flags (types) */#define ZEND_ACC_STATIC 0x01#define ZEND_ACC_ABSTRACT 0x02#define ZEND_ACC_FINAL 0x04#define ZEND_ACC_IMPLEMENTED_ABSTRACT 0x08 /* class flags (types) *//* ZEND_ACC_IMPLICIT_ABSTRACT_CLASS is used for abstract classes (since it is set by any abstract method even interfaces MAY have it set, too). *//* ZEND_ACC_EXPLICIT_ABSTRACT_CLASS denotes that a class was explicitly defined as abstract by using the keyword. */#define ZEND_ACC_IMPLICIT_ABSTRACT_CLASS 0x10#define ZEND_ACC_EXPLICIT_ABSTRACT_CLASS 0x20#define ZEND_ACC_INTERFACE 0x40#define ZEND_ACC_TRAIT 0x80#define ZEND_ACC_ANON_CLASS 0x100#define ZEND_ACC_ANON_BOUND 0x200#define ZEND_ACC_INHERITED 0x400 /* method flags (visibility) *//* The order of those must be kept - public &lt; protected &lt; private */#define ZEND_ACC_PUBLIC 0x100#define ZEND_ACC_PROTECTED 0x200#define ZEND_ACC_PRIVATE 0x400#define ZEND_ACC_PPP_MASK (ZEND_ACC_PUBLIC | ZEND_ACC_PROTECTED | ZEND_ACC_PRIVATE) #define ZEND_ACC_CHANGED 0x800#define ZEND_ACC_IMPLICIT_PUBLIC 0x1000 /* method flags (special method detection) */#define ZEND_ACC_CTOR 0x2000#define ZEND_ACC_DTOR 0x4000#define ZEND_ACC_CLONE 0x8000 /* method flag used by Closure::__invoke() */#define ZEND_ACC_USER_ARG_INFO 0x80 /* method flag (bc only), any method that has this flag can be used statically and non statically. */#define ZEND_ACC_ALLOW_STATIC 0x10000 /* shadow of parent's private method/property */#define ZEND_ACC_SHADOW 0x20000 /* deprecation flag */#define ZEND_ACC_DEPRECATED 0x40000 3). 具体实现特定的方法：之前在 hello_class.h 中使用 PHP_ME 定义过方法，就好似函数一样，有定义就必须有实现。 12345678910PHP_METHOD(Car, setDriver)&#123; zend_string *driver; ZEND_PARSE_PARAMETERS_START(1, 1) Z_PARAM_STR(driver) ZEND_PARSE_PARAMETERS_END(); zend_update_property_string(car_ce, getThis(), "driver", sizeof("driver") - 1, ZSTR_VAL(driver));&#125; 中间 ZEND_PARSE_PARAMETERS_START(1, 1) 到 ZEND_PARSE_PARAMETERS_END(); 是获取传入的参数，这里不做解释了，前面的教程有介绍过，重点来看： 1zend_update_property_string(car_ce, getThis(), "driver", sizeof("driver") - 1, ZSTR_VAL(driver)); 这个方法 zend_update_property_string 直接从翻译过来应该也不能，可以解释为：更新属性为一个特定的字符串。 第一个参数：类的结构体指针，这里是之前定义的： car_ce 第二个参数：当前实例的指针，其实就类似PHP当中的 $this ，扩展中使用 getThis() 第三个参数：属性名 第四个参数：属性名的长度 第五个参数：需要设置的字符串，这里通过 ZSTR_VAL 将 zend_string 中实际的值取出来。 再来看看另外一个方法 run : 12345678PHP_METHOD(Car, run)&#123; zval *driver, rdriver; zend_string *driver_string; driver = zend_read_property(car_ce, getThis(), "driver", sizeof("driver") - 1, 0, &amp;rdriver); driver_string = Z_STR_P(driver); RETURN_STR(strpprintf(0, "%s is driving the car.", ZSTR_VAL(driver_string)));&#125; 重点关注里面调用的方法：zend_read_property , 我们通过这个方法获取属性的内容，就像 PHP 当中的 $this-&gt;driver 。 解析一下 zend_read_property 的参数： 第一个参数：类的结构体指针，这里是之前定义的： car_ce 第二个参数：当前实例的指针，其实就类似PHP当中的 $this ，扩展中使用 getThis() 第三个参数：属性名 第四个参数：属性名的长度 第五个参数：是否报错，0表示不报，1表示报 第六个参数：PHP7扩展中新增，貌似也没啥用，可以直接传 NULL 返回这是一个 zval ，通过 Z_STR_P 转变成 zend_string 供后面 strpprintf 来使用。 四、注册类我们已经声明并且实现了类了，但是这个时候，如果你编译了，其实还是不能找到这个类哦，我们需要向PHP注册这个类。具体可以在 `PHP_MINIT_FUNCTION (hello_class)` 中注册，这里要稍稍解释一下这个方法的意思，PHP_MINIT_FUNCTION 是PHP执行的 模块初始化 的回调函数，也就是当 PHP 的声明周期走到 模块初始化 的时候，会调用这个方法。上代码： 123456789PHP_MINIT_FUNCTION (hello_class)&#123; zend_class_entry car; INIT_CLASS_ENTRY(car, "Car", car_methods); car_ce = zend_register_internal_class(&amp;car); zend_declare_property_null(car_ce, "driver", sizeof("driver") - 1, ZEND_ACC_PROTECTED); return SUCCESS;&#125; zend_class_entry car; 这行创建一个类结构体 INIT_CLASS_ENTRY(car, “Car”, car_methods); 这里初始化类，第一个参数是上面创建的 car ；第二个参数是类名；第三个参数就是之前定义的：const zend_function_entry car_methods[]； car_ce = zend_register_internal_class(&amp;car); 注册类; 参数为之前创建的 car; 返回值是 zend_class_entry 的指针，复制给我们定义的全局变量 car_ce; zend_declare_property_null(car_ce, “driver”, sizeof(“driver”) - 1, ZEND_ACC_PROTECTED); 这一行注册了类的属性 driver ，第一个参数是全局类结构指针，第二个参数是属性名；第三个参数是属性名长度；第四个参数是一个属性的掩码，ZEND_ACC_PROTECTED 表示该属性是 protected 的。 五. 结束语到这里为止，这个 Car 这个类已经在 PHP 扩展中实现了，可以直接在 php -a 中直接尝试 new 一个 car 来试一下，但是大家是否觉得有点缺失，类应该是需要有“继承” 的，那下一篇我们就介绍一下如何在PHP扩张中继承一个类。]]></content>
      <categories>
        <category>PHP扩展开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP扩展开发（2）- 创建函数]]></title>
    <url>%2F2018%2F02%2F13%2FPHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89--%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[在我们日常使用 PHP 当中，当然少不了使用 PHP提供的内部函数，例如：file_get_contents / file_put_contents / trim / array_flip… 等等。因为PHP刚开始面向过程的语言的（C/perl的综合体），所以单独的函数很重要。本文讨论如何在 PHP扩展中写自己的方法。 在开始之前，我们需要先了解一下 hello.c 文件的一些结构，按照上一篇文章生成的扩展 hello 来展开我们本章的描述，未看过的可以先查阅《PHP扩展开发（1）-初识扩展》。 一、分析生成的源码以下就是 hello.c 文件的内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184/* +----------------------------------------------------------------------+ | PHP Version 7 | +----------------------------------------------------------------------+ | Copyright (c) 1997-2018 The PHP Group | +----------------------------------------------------------------------+ | This source file is subject to version 3.01 of the PHP license, | | that is bundled with this package in the file LICENSE, and is | | available through the world-wide-web at the following url: | | http://www.php.net/license/3_01.txt | | If you did not receive a copy of the PHP license and are unable to | | obtain it through the world-wide-web, please send a note to | | license@php.net so we can mail you a copy immediately. | +----------------------------------------------------------------------+ | Author: | +----------------------------------------------------------------------+*/ /* $Id$ */ #ifdef HAVE_CONFIG_H#include "config.h"#endif #include "php.h"#include "php_ini.h"#include "ext/standard/info.h"#include "php_hello.h" /* If you declare any globals in php_hello.h uncomment this:ZEND_DECLARE_MODULE_GLOBALS(hello)*/ /* True global resources - no need for thread safety here */static int le_hello; /* &#123;&#123;&#123; PHP_INI *//* Remove comments and fill if you need to have entries in php.iniPHP_INI_BEGIN() STD_PHP_INI_ENTRY("hello.global_value", "42", PHP_INI_ALL, OnUpdateLong, global_value, zend_hello_globals, hello_globals) STD_PHP_INI_ENTRY("hello.global_string", "foobar", PHP_INI_ALL, OnUpdateString, global_string, zend_hello_globals, hello_globals)PHP_INI_END()*//* &#125;&#125;&#125; */ /* Remove the following function when you have successfully modified config.m4 so that your module can be compiled into PHP, it exists only for testing purposes. */ /* Every user-visible function in PHP should document itself in the source *//* &#123;&#123;&#123; proto string confirm_hello_compiled(string arg) Return a string to confirm that the module is compiled in */PHP_FUNCTION(confirm_hello_compiled)&#123; char *arg = NULL; size_t arg_len, len; zend_string *strg; if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &amp;arg, &amp;arg_len) == FAILURE) &#123; return; &#125; strg = strpprintf(0, "Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.", "hello", arg); RETURN_STR(strg);&#125;/* &#125;&#125;&#125; *//* The previous line is meant for vim and emacs, so it can correctly fold and unfold functions in source code. See the corresponding marks just before function definition, where the functions purpose is also documented. Please follow this convention for the convenience of others editing your code.*/ /* &#123;&#123;&#123; php_hello_init_globals *//* Uncomment this function if you have INI entriesstatic void php_hello_init_globals(zend_hello_globals *hello_globals)&#123; hello_globals-&gt;global_value = 0; hello_globals-&gt;global_string = NULL;&#125;*//* &#125;&#125;&#125; */ /* &#123;&#123;&#123; PHP_MINIT_FUNCTION */PHP_MINIT_FUNCTION(hello)&#123; /* If you have INI entries, uncomment these lines REGISTER_INI_ENTRIES(); */ return SUCCESS;&#125;/* &#125;&#125;&#125; */ /* &#123;&#123;&#123; PHP_MSHUTDOWN_FUNCTION */PHP_MSHUTDOWN_FUNCTION(hello)&#123; /* uncomment this line if you have INI entries UNREGISTER_INI_ENTRIES(); */ return SUCCESS;&#125;/* &#125;&#125;&#125; */ /* Remove if there's nothing to do at request start *//* &#123;&#123;&#123; PHP_RINIT_FUNCTION */PHP_RINIT_FUNCTION(hello)&#123;#if defined(COMPILE_DL_HELLO) &amp;&amp; defined(ZTS) ZEND_TSRMLS_CACHE_UPDATE();#endif return SUCCESS;&#125;/* &#125;&#125;&#125; */ /* Remove if there's nothing to do at request end *//* &#123;&#123;&#123; PHP_RSHUTDOWN_FUNCTION */PHP_RSHUTDOWN_FUNCTION(hello)&#123; return SUCCESS;&#125;/* &#125;&#125;&#125; */ /* &#123;&#123;&#123; PHP_MINFO_FUNCTION */PHP_MINFO_FUNCTION(hello)&#123; php_info_print_table_start(); php_info_print_table_header(2, "hello support", "enabled"); php_info_print_table_end(); /* Remove comments if you have entries in php.ini DISPLAY_INI_ENTRIES(); */&#125;/* &#125;&#125;&#125; */ /* &#123;&#123;&#123; hello_functions[] * * Every user visible function must have an entry in hello_functions[]. */const zend_function_entry hello_functions[] = &#123; PHP_FE(confirm_hello_compiled, NULL) /* For testing, remove later. */ PHP_FE_END /* Must be the last line in hello_functions[] */&#125;;/* &#125;&#125;&#125; */ /* &#123;&#123;&#123; hello_module_entry */zend_module_entry hello_module_entry = &#123; STANDARD_MODULE_HEADER, "hello", hello_functions, PHP_MINIT(hello), PHP_MSHUTDOWN(hello), PHP_RINIT(hello), /* Replace with NULL if there's nothing to do at request start */ PHP_RSHUTDOWN(hello), /* Replace with NULL if there's nothing to do at request end */ PHP_MINFO(hello), PHP_HELLO_VERSION, STANDARD_MODULE_PROPERTIES&#125;;/* &#125;&#125;&#125; */ #ifdef COMPILE_DL_HELLO#ifdef ZTSZEND_TSRMLS_CACHE_DEFINE()#endifZEND_GET_MODULE(hello)#endif /* * Local variables: * tab-width: 4 * c-basic-offset: 4 * End: * vim600: noet sw=4 ts=4 fdm=marker * vim&lt;600: noet sw=4 ts=4 */ 其中，大家可以看到： 1234567891011121314PHP_FUNCTION(confirm_hello_compiled)&#123; char *arg = NULL; size_t arg_len, len; zend_string *strg; if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &amp;arg, &amp;arg_len) == FAILURE) &#123; return; &#125; strg = strpprintf(0, "Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.", "hello", arg); RETURN_STR(strg);&#125; 这个就是一个在扩展中定义的 php 函数了，函数名为：confirm_hello_compiled，我们调用一下这个函数: 12345678910&lt;?php var_dump(confirm_hello_compiled('hello')); /* 输出:string(107) "Congratulations! You have successfully modified ext/hello/config.m4. Module hello is now compiled into PHP." */ 再全文搜索一下“confirm_hello_compiled” ， 就会发现另外一个地方出现： 1234const zend_function_entry hello_functions[] = &#123; PHP_FE(confirm_hello_compiled, NULL) /* For testing, remove later. */ PHP_FE_END /* Must be the last line in hello_functions[] */&#125;; 这里 PHP_FE(confirm_hello_compiled, NULL) 其实就是向 Zend 引擎注册编写好的函数，之后我们写自己的方法也必须在这里注册。 二、编写自己的函数学习编程最后的方法莫过于照样画葫芦，我们先按照 confirm_hello_compiled 方法的格式写一个自己的方法： 1234567891011121314PHP_FUNCTION(get_length) //获取字符串长度&#123; char *arg = NULL; size_t arg_len, len; if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &amp;arg, &amp;arg_len) == FAILURE) &#123; return; &#125; int length; length = strlen(arg); RETURN_LONG(length);&#125; 注册该函数： 12345const zend_function_entry hello_functions[] = &#123; PHP_FE(get_length, NULL) PHP_FE(confirm_hello_compiled, NULL) /* For testing, remove later. */ PHP_FE_END /* Must be the last line in hello_functions[] */&#125;; 重新编译： 1make &amp; make install 然后执行： 12345&lt;?phpecho get_length("fuxxxxk");//输出 7 然后，一个函数就这样完成了，然后我们该来分析一下函数内的一些代码。 三、代码分析1、如何获取参数可以看这段代码，其中函数 zend_parse_parameters 就是获取参数的方法： 123456char *arg = NULL;size_t arg_len, len; if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &amp;arg, &amp;arg_len) == FAILURE) &#123; return;&#125; 其中，第一个参数 ZEND_NUM_ARGS() 其实就是 PHP 当中的 $argc，获取所有的参数的数量，无需改变。 第二个参数，格式化字符串。将传入的参数转化成对应的PHP变量类型。s 表示参数是一个字符串。要把传入的参数转换为zend_string类型。 2、更好的获取参数方式: FAST ZPP先放代码： 12345678910111213PHP_FUNCTION(get_length)&#123; zend_string *str; ZEND_PARSE_PARAMETERS_START(1, 1) Z_PARAM_STR(str) ZEND_PARSE_PARAMETERS_END(); int length; length = ZSTR_LEN(str); RETURN_LONG(length);&#125; 其中，获取参数变成了： 123ZEND_PARSE_PARAMETERS_START(1, 1) Z_PARAM_STR(type)ZEND_PARSE_PARAMETERS_END(); 这3个类似函数的其实都是宏，所以你可以看到最后都没有加 “;” 分号。 ZEND_PARSE_PARAMETERS_START(1, 1) 解释：第一个参数表示必传的参数个数，第二个参数表示最多传入的参数个数。 Z_PARAM_STR(type) 解释：将参数解释成 zend_string ZEND_PARSE_PARAMETERS_END(); 解释：结束，直接填写即可。 那当然了，获取参数还是有很多的参数可以选择的，具体的参数选择可以参考： http://php.net/manual/zh/internals2.funcs.php https://wiki.php.net/rfc/fast\_zpp 3. 返回值最后我们看看实现返回值： 1RETURN_LONG(length); 通过这个宏，我们可以返回需要的值，常用的宏方法有： RETURN_NULL() 返回 NULL RETURN_LONG(l) 返回整型 RETURN_DOUBLE(d) 返回浮点型 RETURN_STR(s) 返回一个字符串。参数是一个zend_string * 指针 RETURN_STRING(s) 返回一个字符串。参数是一个char * 指针 RETURN_STRINGL(s, l) 返回一个字符串。第二个参数是字符串长度。 RETURN_EMPTY_STRING() 返回一个空字符串。 RETURN_ARR(r) 返回一个数组。参数是zend_array *指针。 RETURN_OBJ(r) 返回一个对象。参数是zend_object *指针。 RETURN_ZVAL(zv, copy, dtor) 返回任意类型。参数是 zval *指针。 RETURN_FALSE 返回false RETURN_TRUE 返回true]]></content>
      <categories>
        <category>PHP扩展开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP扩展开发（1）-初识扩展]]></title>
    <url>%2F2018%2F02%2F10%2FPHP%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89-%E5%88%9D%E8%AF%86%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[PHP 扩展开发（一）：新建扩展 本文在 php 7.1 的基础上描述，请大家注意哦。 1、下载PHP源码最简单的，就是直接 clone github 的源码，怎么使用 git 就不做介绍了。 cd ~ git clone git@github.com:php/php-src.git 2、目录结构 ext: 官方扩展目录，包括了绝大多数PHP的函数的定义和实现，如array系列，pdo系列，spl系列等函数的实现，都在这个目录中。 main: 这里存放的就是PHP最为核心的文件了，主要实现PHP的基本设施，这里和Zend引擎不一样，Zend引擎主要实现语言最核心的语言运行环境。 sapi: 包含了各种服务器抽象层的代码，例如apache的mod_php，cgi，fastcgi以及fpm等等接口。 TSRM: PHP的线程安全是构建在TSRM库之上的，PHP实现中常见的*G宏通常是对TSRM的封装，TSRM(Thread Safe Resource Manager)线程安全资源管理器。 tests: PHP的测试脚本集合，包含PHP各项功能的测试文件 win32: 这个目录主要包括Windows平台相关的一些实现，比如sokcet的实现在Windows下和*Nix平台就不太一样，同时也包括了Windows下编译PHP相关的脚本。 3. 新建扩展PHP 官方其实提供了很多有用的工具来帮助你开发扩展，例如：ext 目录下的 ./ext_skel , 运行 ./ext_skel 得出说明： ./ext_skel --extname=module [--proto=file] [--stubs=file] [--xml[=file]] [--skel=dir] [--full-xml] [--no-help] --extname=module module is the name of your extension --proto=file file contains prototypes of functions to create --stubs=file generate only function stubs in file --xml generate xml documentation to be added to phpdoc-svn --skel=dir path to the skeleton directory --full-xml generate xml documentation for a self-contained extension (not yet implemented) --no-help don&apos;t try to be nice and create comments in the code and helper functions to test if the module compiled 我们先忽略其他说明，只关注： --ext &lt;name&gt; 就好，这个命令的是指定扩展名称的意思，那我们就新建一个名为：hello 的扩展作为开始了。 ./ext_skel --extname=hello 执行完命令之后，得出： Creating directory hello Creating basic files: config.m4 config.w32 .gitignore hello.c php_hello.h CREDITS EXPERIMENTAL tests/001.phpt hello.php [done]. To use your new extension, you will have to execute the following steps: 1. $ cd .. 2. $ vi ext/hello/config.m4 3. $ ./buildconf 4. $ ./configure --[with|enable]-hello 5. $ make 6. $ ./sapi/cli/php -f ext/hello/hello.php 7. $ vi ext/hello/hello.c 8. $ make Repeat steps 3-6 until you are satisfied with ext/hello/config.m4 and step 6 confirms that your module is compiled into PHP. Then, start writing code and repeat the last two steps as often as necessary. 就这样，ext_skel 工具就帮你创建了一个名为 hello 的扩展了，扩展在 ext/hello 文件夹中，我们 cd hello &amp; tree 进去看看文件结构： . ├── CREDITS ├── EXPERIMENTAL ├── config.m4 ├── config.w32 ├── hello.c ├── hello.php ├── php_hello.h └── tests └── 001.phpt 1 directory, 8 files 然后，我们先不管 hello 扩展的内容有什么，先编译先，但是在编译之前，我们需要修改一下 config.m4, 执行命令 vim config.m4 修改： dnl If your extension references something external, use with: dnl PHP_ARG_WITH(say, for say support, dnl Make sure that the comment is aligned: dnl [ --with-say Include say support]) dnl Otherwise use enable: dnl PHP_ARG_ENABLE(say, whether to enable say support, dnl Make sure that the comment is aligned: dnl [ --enable-say Enable say support]) 为： dnl If your extension references something external, use with: dnl PHP_ARG_WITH(say, for say support, dnl Make sure that the comment is aligned: dnl [ --with-say Include say support]) dnl Otherwise use enable: PHP_ARG_ENABLE(say, whether to enable say support, Make sure that the comment is aligned: [ --enable-say Enable say support]) 其中 dnl 是 注释的意思，类似于 php 当中的 // 一样。 然后，我们就可以开始执行编译了，输入命令： phpize ./configure make make install 最后，你可以在 目录 mudule 下看到 hello.so 这个文件，这样的话，我们就可以在 php.ini 中添加: [hello] extension=&quot;hello.so&quot; 再运行 php -m 查看是否存在 hello 扩展了。]]></content>
      <categories>
        <category>PHP扩展开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg 循环推流 RTMP]]></title>
    <url>%2F2017%2F11%2F20%2Fffmpeg-%E5%BE%AA%E7%8E%AF%E6%8E%A8%E6%B5%81-RTMP%2F</url>
    <content type="text"><![CDATA[ffmpeg -threads 2 -re -fflags +genpts -stream_loop -1 -i &quot;xxxxx.mp4&quot; -acodec copy -vcodec copy -f flv -y &quot;rtmp://pili-publish.pili.echohu.top/1314xicong/huxicongp?expire=1468471134&amp;token=olwdBfksR8ycLmFPVEytGwjrwEs=&quot;]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>rtmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言当中的OOP]]></title>
    <url>%2F2017%2F09%2F04%2FC%E8%AF%AD%E8%A8%80%E5%BD%93%E4%B8%AD%E7%9A%84OOP%2F</url>
    <content type="text"><![CDATA[前言最近搞 Unix编程 &amp; PHP扩展开发 搞得不亦乐乎，忽然，凭我低下的C语言掌控能力，忽然看到一个不能理解的片段（来自Swoole): struct _swReactor { /* .... 省略100行 */ int (*add)(swReactor *, int fd, int fdtype); int (*set)(swReactor *, int fd, int fdtype); int (*del)(swReactor *, int fd); int (*wait)(swReactor *, struct timeval *); void (*free)(swReactor *); int (*setHandle)(swReactor *, int fdtype, swReactor_handle); swDefer_callback *defer_callback_list; void (*onTimeout)(swReactor *); void (*onFinish)(swReactor *); void (*enable_accept)(swReactor *); int (*write)(swReactor *, int, void *, int); int (*close)(swReactor *, int); int (*defer)(swReactor *, swCallback, void *); }; 嗯嗯嗯嗯？ 为何在 struct 里面有函数指针？作者想干什么？ 哦，继续往下看代码，发现，原来是在用C写OOP。 C语言下的面向对象编程所以，参考了各方教程，写了个小demo: #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; typedef struct people People; struct people{ int age; int (*get_age) (People *); }; int get_age(People *p) { return p-&gt;age; } People base = { 0, get_age }; People* newPeople(int age) { People *new_people = (People *)malloc(sizeof(People)); new_people = &amp;base; new_people-&gt;age = age; return new_people; } int main() { char string[100]; People *people1 = newPeople(20); printf(&quot;Get age %d&quot;, people1-&gt;get_age(people2)); return 0; }]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[推荐5个内容外包中介网站]]></title>
    <url>%2F2017%2F07%2F06%2F%E6%8E%A8%E8%8D%905%E4%B8%AA%E5%86%85%E5%AE%B9%E5%A4%96%E5%8C%85%E4%B8%AD%E4%BB%8B%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[搜索引擎喜欢原创内容人人都知道，最近在研究niche站，但是个人的英文水平一般般，普通阅读甚至说起来都没有太大问题，但是写文章的话，感觉应该没有“英语的味道”，所以，专业的事情还是交给专业的人来做吧：例如，外包写手。 根据各种前辈的推荐，有5个不错的外包中介不错，今天我们就介绍一下： 1. iwriter（强烈推荐） 网址：www.iwriter.com 特点：价格低廉，$3 就能获取500字的相对质量还好的文章，但是需要自己去把关质量，那是当然的。 2. Fiverr 网址：https://www.fiverr.com/ 特点：这是国外一家专门为客户提供各种服务的网站，在这里你可以花费5美金购买各种服务，我们需要的产品文章内容创作、翻译、图片和视频设计制作、外链建设等等都可以在这里找到合适的雇工，当然，你也可以注册fiverr然后为别人提供服务。 3. Upwork 网址：https://www.upwork.com/ 特点：Upwork跟fiverr基本类似，现在可以说是全球最大的自由职业者服务平台，跟fiverr相比，更专业一点，当然价格一般更贵。所以如果你想要高质量的东西，建议选择upwork。 但是upwork也有一个缺点，那就是这个需要你首先发布服务，然后等别人来投标，最后你再选择由谁来做，这个对于很多懒人来说，可能有点麻烦了，不如fiverr挑好服务，直接付钱就行。 4. SEOClerks 网址：https://www.seoclerk.com/ 特点：提供SEO相关的服务，外链、流量、社交、内容等等都可以在这里购买，但是这里的规范度比起fiverr还是稍有差距，买内容的话，fiverr会是更好的选择。 5. SEOClerks 网址：https://contentmart.com/ 特点：跟前面4个相比，这个就专注的多了，单一的写手服务平台，只提供内容相关的服务，一般只提供高质量内容外包服务，在这里你可以花费几百到几千美金雇佣专业写手或者营销师为你写一篇可以引发病毒营销的文章。]]></content>
      <categories>
        <category>SEO优化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Centos 6.5 怒装 Gitlab]]></title>
    <url>%2F2017%2F06%2F17%2FCentos-6.5-%E6%80%92%E8%A3%85-Gitlab%2F</url>
    <content type="text"><![CDATA[Git 服务器的可选范围? Gitlab gogs 假如现在让我重新选，那其实轻量级的gogs其实也不差，因为Gitlab实在实在实在太”重“了。 对机器的要求 2核CPU 4G内存（至少2G） 我的单核CPU+2G内存，Gitlab经常ENOMEM… 安装 gitlab-ce 的源想直接从 gitlab 官网下载？国内的网络环境你又不是不知道，还是乖乖选择国内源吧，可以选择清华大学源： cd ~ curl -LJO https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-9.2.6-ce.0.el6.x86_64.rpm rpm -i gitlab-ce-9.2.6-ce.0.el6.x86_64.rpm 安装依赖sudo yum install curl openssh-server openssh-clients postfix cronie sudo service postfix start sudo chkconfig postfix on 安装 gitlab-ce (ce就是社区版的意思哦)sudo yum install gitlab-ce 配置 gitlab由于 gitlab 的一键安装是包含以下服务的 Nginx PostgreSQL Redis gitlab 你需要先确认你当前机器是否有Nginx &amp; Redis &amp; PostgreSQL 这类服务了，然后，你需要根据自己需要来配置 gitlab： vim /etc/gitlab/gitlab.rb 假如本来有 Nginx 服务的，可以关于gitlab自带的nginxnginx[&apos;enable&apos;] = false 然后在自己的Nginx 加入配置：# gitlab socket 文件地址 upstream gitlab { server unix://var/opt/gitlab/gitlab-rails/sockets/gitlab.socket; } server { listen 80; server_name git.goodspb.com; # 请修改为你的域名 server_tokens off; # don&apos;t show the version number, a security best practice root /opt/gitlab/embedded/service/gitlab-rails/public; # Increase this if you want to upload large attachments # Or if you want to accept large git objects over http client_max_body_size 0; # individual nginx logs for this gitlab vhost access_log /var/log/gitlab/nginx/gitlab_access.log; error_log /var/log/gitlab/nginx/gitlab_error.log; location / { # serve static files from defined root folder;. # @gitlab is a named location for the upstream fallback, see below try_files $uri $uri/index.html $uri.html @gitlab; } # if a file, which is not found in the root folder is requested, # then the proxy pass the request to the upsteam (gitlab unicorn) location @gitlab { # If you use https make sure you disable gzip compression # to be safe against BREACH attack proxy_read_timeout 300; # Some requests take more than 30 seconds. proxy_connect_timeout 300; # Some requests take more than 30 seconds. proxy_redirect off; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Frame-Options SAMEORIGIN; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://gitlab; } # Enable gzip compression as per rails guide: http://guides.rubyonrails.org/asset_pipeline.html#gzip-compression # WARNING: If you are using relative urls do remove the block below # See config/application.rb under &quot;Relative url support&quot; for the list of # other files that need to be changed for relative url support location ~ ^/(assets)/ { root /opt/gitlab/embedded/service/gitlab-rails/public; # gzip_static on; # to serve pre-gzipped version expires max; add_header Cache-Control public; } error_page 502 /502.html; } 假如本来就有 Redis 服务，可以：# 关闭原来redis redis[&apos;enable&apos;] = false # 配置自己的redis信息 gitlab_rails[&apos;redis_host&apos;] = &quot;127.0.0.1&quot; gitlab_rails[&apos;redis_port&apos;] = 6379 gitlab_rails[&apos;redis_password&apos;] = nil gitlab_rails[&apos;redis_database&apos;] = 0 ### 还需要配置SMTP邮件服务，不然邮件发不出，就不能完成注册了 # 修改以下配置 gitlab_rails[&apos;smtp_enable&apos;] = true gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.163.com&quot; gitlab_rails[&apos;smtp_port&apos;] = 25 gitlab_rails[&apos;smtp_user_name&apos;] = &quot;abc@163.com&quot; gitlab_rails[&apos;smtp_password&apos;] = &quot;xxxxxx&quot; gitlab_rails[&apos;smtp_domain&apos;] = &quot;163.com&quot; gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot; gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true gitlab_rails[&apos;smtp_tls&apos;] = false gitlab_rails[&apos;gitlab_email_enabled&apos;] = true gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;abc@163.com&apos; # 有些服务商如 163，需要将 gitlab_email_from 和 git_user_email 和 smtp_user_name 设置成相同的 user[&apos;git_user_email&apos;] = &quot;abc@163.com&quot; 设置好想调试邮件，可以在命令行执行 gitlab-rails console ，然后再在ruby命令行执行： Notify.test_email(&apos;destination_email@address.com&apos;, &apos;Message Subject&apos;, &apos;Message Body&apos;).deliver_now 更多邮件设置，可以查看官方文档 设置时区gitlab_rails[&apos;time_zone&apos;] = &apos;Asia/Shanghai&apos; 设置域名external_url &apos;http://git.goodspb.com/&apos; 假如还是 SSL 的话，好需要配置nginx[&apos;listen_port&apos;] = 80 ##! **Override only if your reverse proxy internally communicates over HTTP** ##! Docs: https://docs.gitlab.com/omnibus/settings/nginx.html#supporting-proxied-ssl nginx[&apos;listen_https&apos;] = false # nginx[&apos;custom_gitlab_server_config&apos;] = &quot;location ^~ /foo-namespace/bar-project/raw/ {\n deny all;\n}\n&quot; # nginx[&apos;custom_nginx_config&apos;] = &quot;include /etc/nginx/conf.d/example.conf;&quot; # nginx[&apos;proxy_read_timeout&apos;] = 3600 # nginx[&apos;proxy_connect_timeout&apos;] = 300 nginx[&apos;proxy_set_headers&apos;] = { # &quot;Host&quot; =&gt; &quot;$http_host_with_default&quot;, # &quot;X-Real-IP&quot; =&gt; &quot;$remote_addr&quot;, # &quot;X-Forwarded-For&quot; =&gt; &quot;$proxy_add_x_forwarded_for&quot;, &quot;X-Forwarded-Proto&quot; =&gt; &quot;https&quot;, &quot;X-Forwarded-Ssl&quot; =&gt; &quot;on&quot;, # &quot;Upgrade&quot; =&gt; &quot;$http_upgrade&quot;, # &quot;Connection&quot; =&gt; &quot;$connection_upgrade&quot; } 配置差不多了，可以重启服务了# 执行命令 sudo gitlab-ctl reconfigure 查看 logsudo gitlab-ctl tail Have fun.]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 ssh 加代理来进行 rsync]]></title>
    <url>%2F2017%2F05%2F31%2F%E4%BD%BF%E7%94%A8-ssh-%E5%8A%A0%E4%BB%A3%E7%90%86%E6%9D%A5%E8%BF%9B%E8%A1%8C-rsync%2F</url>
    <content type="text"><![CDATA[废话少讲，直接上命令： rsync -av --delete --exclude-from=./deployignore -e &quot;ssh -o &apos;ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p&apos;&quot; /data/wwwroot/abc root@192.168.0.100:/home/wwwroot/abc 解析： --delete --exclude-from=xxxx //忽略该文件内容中的列表 -e &quot;ssh -o &apos;ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p&apos;&quot; //使用 ssh 做通讯，并使用 sock5 代理，代理地址：127.0.0.1 ，端口：1080 /data/wwwroot/abc //本地地址 root@192.168.0.100:/home/wwwroot/abc //远端地址 have fun!]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>rsync</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac OS 使用 shadowsock 来代理 ssh 访问服务器]]></title>
    <url>%2F2017%2F05%2F13%2FMac-OS-%E4%BD%BF%E7%94%A8-shadowsock-%E6%9D%A5%E4%BB%A3%E7%90%86-ssh-%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[有时候，有时候，你需要访问国外的服务器，但是，如果直接使用 ssh 去连接的话，你会感觉奇慢无比，这时候，一个代理可能会拯救你，例如：ss。 本文是说明如何使用 shadowsock 来代理 ssh 访问服务器，不是使用 ssh 来做代理哦，大家请看清楚 当然，系统针对 Unix（其实只在 Mac 下使用过） 使用方法ssh root@192.168.0.1 -o &quot;ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p&quot; 解释ssh root@192.168.0.1 这部分就不用解释了吧？我们来看看 -o &quot;ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p&quot; -o ProxyCommand : ssh 命令选项，你可以理解成使用 “在 ssh 中使用代理” nc: nc命令(netcat) 127.0.0.1:1080: 本地 shadowsock 的监听地址和监听端口，这是这条命令的唯一需要你自己配置的部分，可内网或者外网。 鉴别自己是否真的使用了代理来登陆服务器终端执行命令 who ， 会出现以下结果： root@ubuntu:~# who root pts/2 2017-05-13 18:13 (xxx.xxx.xxx.xxx) 这个时候，就就要看一下 (xxx.xxx.xxx.xxx) 是不是代理的命令了。 Have fun!]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP CURL 超时设置 CURLOPT_CONNECTTIMEOUT 和 CURLOPT_TIMEOUT 的区别]]></title>
    <url>%2F2017%2F04%2F25%2FPHP-CURL-%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE-CURLOPT_CONNECTTIMEOUT-%E5%92%8C-CURLOPT_TIMEOUT-%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[CURLOPT_CONNECTTIMEOUT用来告诉 PHP 在成功连接服务器前等待多久（连接成功之后就会开始缓冲输出），这个参数是为了应对目标服务器的过载，下线，或者崩溃等可能状况。 CURLOPT_TIMEOUT用来告诉成功 PHP 从服务器接收缓冲完成前需要等待多长时间，如果目标是个巨大的文件，生成内容速度过慢或者链路速度过慢，这个参数就会很有用。 例子使用 cURL 下载 MP3 文件是一个对开发人员来说不错的例子，CURLOPT_CONNECTTIMEOUT 可以设置为10秒，标识如果服务器10秒内没有响应，脚本就会断开连接，CURLOPT_TIMEOUT 可以设置为100秒，如果MP3文件100秒内没有下载完成，脚本将会断开连接。 需要注意的是：CURLOPT_TIMEOUT 默认为0，意思是永远不会断开链接。所以不设置的话，可能因为链接太慢，会把 HTTP 资源用完。 在 WordPress 中，wp_http 类，这两个值是一样的，默认是设置为 5 秒。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>curl</tag>
        <tag>CURLOPT_CONNECTTIMEOUT</tag>
        <tag>CURLOPT_TIMEOUT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew 更新 php56 和 php56-mcrypt 之后，动态链接 ext-mcrypt 失败的处理。]]></title>
    <url>%2F2017%2F04%2F16%2FHomebrew-%E6%9B%B4%E6%96%B0-php56-%E5%92%8C-php56-mcrypt-%E4%B9%8B%E5%90%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5-ext-mcrypt-%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%A4%84%E7%90%86%E3%80%82%2F</url>
    <content type="text"><![CDATA[今天手贱使用 homebrew 执行了一下 brew upgrade 来更新安装过的程序。 更新完之后，执行 php -m ，发现出现报错： PHP Warning: PHP Startup: Unable to load dynamic library &apos;/usr/local/opt/php56-mcrypt/mcrypt.so&apos; - dlopen(/usr/local/opt/php56-mcrypt/mcrypt.so, 9): Library not loaded: /usr/local/opt/libtool/lib/libltdl.7.dylib Referenced from: /usr/local/opt/php56-mcrypt/mcrypt.so Reason: image not found in Unknown on line 0 Warning: PHP Startup: Unable to load dynamic library &apos;/usr/local/opt/php56-mcrypt/mcrypt.so&apos; - dlopen(/usr/local/opt/php56-mcrypt/mcrypt.so, 9): Library not loaded: /usr/local/opt/libtool/lib/libltdl.7.dylib Referenced from: /usr/local/opt/php56-mcrypt/mcrypt.so Reason: image not found in Unknown on line 0 看了一下，目录/usr/local/opt/php56-mcrypt/mcrypt.so下面是有东西的，主要的问题是: Library not loaded: /usr/local/opt/libtool/lib/libltdl.7.dylib 详细可见 http://stackoverflow.com/questions/12323252/brew-doctor-dyld-library-not-loaded-error-no-available-formula-for-zlib 解决方案brew install libtool]]></content>
      <categories>
        <category>mac</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
        <tag>libtool</tag>
        <tag>mcrypt</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下的时区修改(Base on Ubuntu/Linode)]]></title>
    <url>%2F2017%2F03%2F06%2Flinux%E4%B8%8B%E7%9A%84%E6%97%B6%E5%8C%BA%E4%BF%AE%E6%94%B9(Base-on-UbuntuLinode)%2F</url>
    <content type="text"><![CDATA[最近买了个 linode ，使用 cronjob 的时候发现时区不对啊，美国的时区不太适合俺这个中国仁，好吧。容我修改一下吧。 自己手工去修改？NONONO，我们使用 tzselect root@ubuntu:~# tzselect Please identify a location so that time zone rules can be set correctly. Please select a continent, ocean, &quot;coord&quot;, or &quot;TZ&quot;. 1) Africa 2) Americas 3) Antarctica 4) Arctic Ocean 5) Asia 6) Atlantic Ocean 7) Australia 8) Europe 9) Indian Ocean 10) Pacific Ocean 11) coord - I want to use geographical coordinates. 12) TZ - I want to specify the time zone using the Posix TZ format. 选择 5 Please select a country whose clocks agree with yours. 1) Afghanistan 18) Israel 35) Palestine 2) Armenia 19) Japan 36) Philippines 3) Azerbaijan 20) Jordan 37) Qatar 4) Bahrain 21) Kazakhstan 38) Russia 5) Bangladesh 22) Korea (North) 39) Saudi Arabia 6) Bhutan 23) Korea (South) 40) Singapore 7) Brunei 24) Kuwait 41) Sri Lanka 8) Cambodia 25) Kyrgyzstan 42) Syria 9) China 26) Laos 43) Taiwan 10) Cyprus 27) Lebanon 44) Tajikistan 11) East Timor 28) Macau 45) Thailand 12) Georgia 29) Malaysia 46) Turkmenistan 13) Hong Kong 30) Mongolia 47) United Arab Emirates 14) India 31) Myanmar (Burma) 48) Uzbekistan 15) Indonesia 32) Nepal 49) Vietnam 16) Iran 33) Oman 50) Yemen 17) Iraq 34) Pakistan 选择9 Please select one of the following time zone regions. 1) Beijing Time 2) Xinjiang Time 选择1 The following information has been given: China Beijing Time Therefore TZ=&apos;Asia/Shanghai&apos; will be used. Local time is now: Mon Mar 6 14:44:25 CST 2017. Universal Time is now: Mon Mar 6 06:44:25 UTC 2017. Is the above information OK? 1) Yes 2) No 选择 1 最后复制 TZ=&#39;Asia/Shanghai&#39;; export TZ 到 .profile 即可。 然后执行： source ~/.profile date 这个时候，就会看见显示的是北京时间。]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python2 / Python3 获取字符中是否包含“中文”]]></title>
    <url>%2F2016%2F09%2F07%2FPython2--Python3-%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E2%80%9C%E4%B8%AD%E6%96%87%E2%80%9D%2F</url>
    <content type="text"><![CDATA[在做爬虫的时候，发现挺有用的： Python2 版本的 def check_contain_chinese(check_str): for ch in check_str.decode(&apos;utf-8&apos;): if u&apos;\u4e00&apos; &lt;= ch &lt;= u&apos;\u9fff&apos;: return True return False Python3 版本的 def check_contain_chinese(check_str): for ch in check_str: if u&apos;\u4e00&apos; &lt;= ch &lt;= u&apos;\u9fff&apos;: return True return False]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[服务器端验证 Apple Game Center GKLocalPlayer 签名（PHP描述）]]></title>
    <url>%2F2016%2F09%2F05%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E9%AA%8C%E8%AF%81-Apple-Game-Center-GKLocalPlayer-%E7%AD%BE%E5%90%8D%EF%BC%88PHP%E6%8F%8F%E8%BF%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前提苹果 Game Center 登录的时候，需要到自身的服务端中去验证用户的有效性。具体可以查看 Apple 的说明文档： https://developer.apple.com/library/mac/documentation/GameKit/Reference/GKLocalPlayer_Ref/index.html#//apple_ref/occ/instm/GKLocalPlayer/generateIdentityVerificationSignatureWithCompletionHandler 重点在于整个验证的描述： 由此可见，服务端需要接受来自客户端的参数有以下 6 个： publicKeyURL playerID bundleID timestamp signature salt 参数预处理其中，timestamp 需要注意，这不是字面意义上的 时间戳 ，实际上是 Big-Endian UInt-64 format 表示的时间值。需要再PHP中识别，我们需要作一下处理： function unpackTimestamp($timestamp) { $highMap = 0xffffffff00000000; $lowMap = 0x00000000ffffffff; $higher = ($timestamp &amp; $highMap) &gt;&gt; 32; $lower = $timestamp &amp; $lowMap; return pack(&apos;NN&apos;, $higher, $lower); } 还有，publicKeyURL 是一个 .cer 结尾的签名文件，我们需要将佢做一定的格式编码，可以这样处理： function getPublicKey($url) { $content = file_get_content($url); //建议使用 curl 来处理，这里为了演示简单直接使用 file_get_content return &apos;-----BEGIN CERTIFICATE-----&apos; . PHP_EOL . chunk_split(base64_encode($content), 64, PHP_EOL) . &apos;-----END CERTIFICATE-----&apos;. PHP_EOL; } 最后，signature 和 salt 均需进行 base64_decode 。 验证签名function checkSignature($publicKeyURL, $playerID, $bundleID, $timestamp, $signature, $salt) { $publicKey = getPublicKey($publicKeyURL); $timestamp = unpackTimestamp($timestamp); $signature = base64_decode($signature); $salt = base64_decode($salt); $data = $playerID.$bundleID.$timestamp.$salt; $result = openssl_verify($data, $signature, openssl_pkey_get_public($publicKey), OPENSSL_ALGO_SHA256); openssl_free_key($publicKey); if ( 1 === $result) { return true; } return false; } 当 checkSignature 函数返回 true 时，表示签名验证通过。 好了，大体的验证流程就是这样了。当验证通过的时候，就可以使用 playerID 来在自己的用户系统中生成唯一的用户ID了。 Have fun.]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何通过 API 获取 实时的货币汇率]]></title>
    <url>%2F2016%2F09%2F01%2F%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87-API-%E8%8E%B7%E5%8F%96-%E5%AE%9E%E6%97%B6%E7%9A%84%E8%B4%A7%E5%B8%81%E6%B1%87%E7%8E%87%2F</url>
    <content type="text"><![CDATA[在做支付的系统时，经常会遇到这样的问题（例如：Google Play 支付），怎么将其他国家的货币转换成人民币呢？那就肯定涉及如何获取实时的汇率进行兑换了。 前提首先，我们需要知道各个国家的货币的符号，按照 ISO 4217 标准来获取： ISO 4217 其次，我们要根据各个国家的货币代号来获取实时的汇率，这里，我们使用 Yahoo 的汇率API： 说明页 https://developer.yahoo.com/yql/console/?q=show%20tables&amp;env=store://datatables.org/alltableswithkeys#h=select+*+from+yahoo.finance.xchange+where+pair+in+(%22CNYUSD%22)) https://query.yahooapis.com/v1/public/yql?q=SELECT%20*%20FROM%20yahoo.finance.xchange%20WHERE%20pair%20IN%20(\[CODES\])&amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys 其中 [CODES] 部分是可以替换货币代码的，假如：你想获取 美元 兑 人民币 ， 就可以写： &quot;USDCNY&quot; : https://query.yahooapis.com/v1/public/yql?q=SELECT%20*%20FROM%20yahoo.finance.xchange%20WHERE%20pair%20IN%20(&quot;USDCNY&quot;)&amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys 返回json: { query: { count: 1, created: &quot;2016-09-01T11:43:17Z&quot;, lang: &quot;zh-CN&quot;, results: { rate: { id: &quot;USDCNY&quot;, Name: &quot;USD/CNY&quot;, Rate: &quot;6.6795&quot;, Date: &quot;9/1/2016&quot;, Time: &quot;5:41am&quot;, Ask: &quot;6.6808&quot;, Bid: &quot;6.6795&quot; } } } } 其中, Rate:”6.6795” 就是 1美元 可以兑换的人民币了。 进阶但是，做应用的时候，我们总不可能一个个货币这样获取吧？ 通常的做法是，获取所有国家的汇率，然后缓存在本地，一段时间才进行更新，这个时候，我们就要这样拼凑 URL ： https://query.yahooapis.com/v1/public/yql?q=SELECT%20*%20FROM%20yahoo.finance.xchange%20WHERE%20pair%20IN%20(%22AEDCNY%22,%20%22AMDCNY%22,%20%22ANGCNY%22,%20%22ARSCNY%22,%20%22AUDCNY%22,%20%22AWGCNY%22,%20%22AZNCNY%22,%20%22BAMCNY%22,%20%22BBDCNY%22,%20%22BDTCNY%22,%20%22BGNCNY%22,%20%22BHDCNY%22,%20%22BIFCNY%22,%20%22BMDCNY%22,%20%22BNDCNY%22,%20%22BOBCNY%22,%20%22BOVCNY%22,%20%22BRLCNY%22,%20%22BSDCNY%22,%20%22BTNCNY%22,%20%22BWPCNY%22,%20%22BYNCNY%22,%20%22BYRCNY%22,%20%22BZDCNY%22,%20%22CADCNY%22,%20%22CDFCNY%22,%20%22CHECNY%22,%20%22CHFCNY%22,%20%22CHWCNY%22,%20%22CLFCNY%22,%20%22CLPCNY%22,%20%22CNYCNY%22,%20%22COPCNY%22,%20%22COUCNY%22,%20%22CRCCNY%22,%20%22CUCCNY%22,%20%22CUPCNY%22,%20%22CVECNY%22,%20%22CZKCNY%22,%20%22DJFCNY%22,%20%22DKKCNY%22,%20%22DOPCNY%22,%20%22EGPCNY%22,%20%22ERNCNY%22,%20%22ETBCNY%22,%20%22EURCNY%22,%20%22FJDCNY%22,%20%22FKPCNY%22,%20%22GBPCNY%22,%20%22GELCNY%22,%20%22GHSCNY%22,%20%22GIPCNY%22,%20%22GMDCNY%22,%20%22GNFCNY%22,%20%22GTQCNY%22,%20%22GYDCNY%22,%20%22HKDCNY%22,%20%22HNLCNY%22,%20%22HRKCNY%22,%20%22HTGCNY%22,%20%22HUFCNY%22,%20%22IDRCNY%22,%20%22ILSCNY%22,%20%22INRCNY%22,%20%22IQDCNY%22,%20%22IRRCNY%22,%20%22ISKCNY%22,%20%22JMDCNY%22,%20%22JODCNY%22,%20%22JPYCNY%22,%20%22KESCNY%22,%20%22KGSCNY%22,%20%22KHRCNY%22,%20%22KMFCNY%22,%20%22KPWCNY%22,%20%22KRWCNY%22,%20%22KWDCNY%22,%20%22KYDCNY%22,%20%22KZTCNY%22,%20%22LAKCNY%22,%20%22LBPCNY%22,%20%22LKRCNY%22,%20%22LRDCNY%22,%20%22LSLCNY%22,%20%22LYDCNY%22,%20%22MADCNY%22,%20%22MDLCNY%22,%20%22MGACNY%22,%20%22MKDCNY%22,%20%22MMKCNY%22,%20%22MNTCNY%22,%20%22MOPCNY%22,%20%22MROCNY%22,%20%22MURCNY%22,%20%22MVRCNY%22,%20%22MWKCNY%22,%20%22MXNCNY%22,%20%22MXVCNY%22,%20%22MYRCNY%22,%20%22MZNCNY%22,%20%22NADCNY%22,%20%22NGNCNY%22,%20%22NIOCNY%22,%20%22NOKCNY%22,%20%22NPRCNY%22,%20%22NZDCNY%22,%20%22OMRCNY%22,%20%22PABCNY%22,%20%22PENCNY%22,%20%22PGKCNY%22,%20%22PHPCNY%22,%20%22PKRCNY%22,%20%22PLNCNY%22,%20%22PYGCNY%22,%20%22QARCNY%22,%20%22RONCNY%22,%20%22RSDCNY%22,%20%22RUBCNY%22,%20%22RWFCNY%22,%20%22SARCNY%22,%20%22SBDCNY%22,%20%22SCRCNY%22,%20%22SDGCNY%22,%20%22SEKCNY%22,%20%22SGDCNY%22,%20%22SHPCNY%22,%20%22SLLCNY%22,%20%22SOSCNY%22,%20%22SRDCNY%22,%20%22SSPCNY%22,%20%22STDCNY%22,%20%22SVCCNY%22,%20%22SYPCNY%22,%20%22SZLCNY%22,%20%22THBCNY%22,%20%22TJSCNY%22,%20%22TMTCNY%22,%20%22TNDCNY%22,%20%22TOPCNY%22,%20%22TRYCNY%22,%20%22TTDCNY%22,%20%22TWDCNY%22,%20%22TZSCNY%22,%20%22UAHCNY%22,%20%22UGXCNY%22,%20%22USDCNY%22,%20%22USNCNY%22,%20%22UYICNY%22,%20%22UYUCNY%22,%20%22UZSCNY%22,%20%22VEFCNY%22,%20%22VNDCNY%22,%20%22VUVCNY%22,%20%22WSTCNY%22,%20%22XAFCNY%22,%20%22XCDCNY%22,%20%22XDRCNY%22,%20%22XOFCNY%22,%20%22XPFCNY%22,%20%22XSUCNY%22,%20%22XUACNY%22,%20%22YERCNY%22,%20%22ZARCNY%22,%20%22ZMWCNY%22,%20%22ZWLCNY%22)&amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys 这里包含了164个国家兑换 人民币 的汇率。 返回的 json 大概是： { query: { count: 165, created: &quot;2016-09-01T11:47:42Z&quot;, lang: &quot;zh-CN&quot;, results: { rate: [ { id: &quot;AEDCNY&quot;, Name: &quot;AED/CNY&quot;, Rate: &quot;1.8187&quot;, Date: &quot;9/1/2016&quot;, Time: &quot;12:47pm&quot;, Ask: &quot;1.8189&quot;, Bid: &quot;1.8187&quot; }, { id: &quot;AMDCNY&quot;, Name: &quot;AMD/CNY&quot;, Rate: &quot;0.0141&quot;, Date: &quot;8/31/2016&quot;, Time: &quot;3:05pm&quot;, Ask: &quot;0.0141&quot;, Bid: &quot;0.0141&quot; }, { id: &quot;ANGCNY&quot;, Name: &quot;ANG/CNY&quot;, Rate: &quot;3.7740&quot;, Date: &quot;9/1/2016&quot;, Time: &quot;4:37am&quot;, Ask: &quot;3.7742&quot;, Bid: &quot;3.7740&quot; }, { id: &quot;ARSCNY&quot;, Name: &quot;ARS/CNY&quot;, Rate: &quot;0.4452&quot;, Date: &quot;8/31/2016&quot;, Time: &quot;9:02pm&quot;, Ask: &quot;0.4455&quot;, Bid: &quot;0.4452&quot; }, ........ } } }]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[在 Laravel 5/4 中生成二维码]]></title>
    <url>%2F2016%2F07%2F28%2F%E5%9C%A8-Laravel-54-%E4%B8%AD%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%2F</url>
    <content type="text"><![CDATA[库地址SimpleSoftwareIO/simple-qrcode 安装修改 composer.json 文件，添加： &quot;require&quot;: { &quot;simplesoftwareio/simple-qrcode&quot;: &quot;1.4.3&quot; //当前稳定版本 } 执行 composer update 添加 Service ProviderLaravel 4 注册 SimpleSoftwareIO\QrCode\QrCodeServiceProvider 至 app/config/app.php 的 providers 数组里. Laravel 5 注册 SimpleSoftwareIO\QrCode\QrCodeServiceProvider::class 至 config/app.php 的 providers 数组里. 添加 AliasesLaravel 4 最后,注册&#39;QrCode&#39; =&gt; &#39;SimpleSoftwareIO\QrCode\Facades\QrCode&#39;至app/config/app.php的 aliases 数组里. Laravel 5 最后,注册&#39;QrCode&#39; =&gt; SimpleSoftwareIO\QrCode\Facades\QrCode::class 至config/app.php的 aliases 数组里. 简例打印视图 一个重要的应用是在打印页面添加的来源二维码.这里我们只需要在 footer.blade.php 文件里添加如下代码即可! &lt;div class=&quot;visible-print text-center&quot;&gt; {!! QrCode::size(100)-&gt;generate(Request::url()); !!} &lt;p&gt;Scan me to return to the original page.&lt;/p&gt; &lt;/div&gt; 嵌入二维码 你可以嵌入一个二维码在你的Email里,让收信的用户可以快速扫描.以下是使用 Laravel 实现的一个例子: &lt;img src=&quot;{!!$message-&gt;embedData(QrCode::format(&apos;png&apos;)-&gt;generate(&apos;Embed me into an e-mail!&apos;), &apos;QrCode.png&apos;, &apos;image/png&apos;)!!}&quot;&gt; 更多的使用方式，请参考：https://www.simplesoftware.io/docs/simple-qrcode/zh]]></content>
      <categories>
        <category>laravel</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel5</tag>
        <tag>qrcode</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 判断类中是否包含特定的 const 常量]]></title>
    <url>%2F2016%2F07%2F26%2FPHP-%E5%88%A4%E6%96%AD%E7%B1%BB%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E7%89%B9%E5%AE%9A%E7%9A%84-const-%E5%B8%B8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[class A { const STATUS_SUCCESS = 1; const STATUS_FAILED = 0; } 要怎样才能判断类中是否包含 A::STATUS_SUCCESS 这个变量呢？ 理论上来讲，我们可以使用PHP的 Reflection 机制，如： $ref = new ReflectionClass(&apos;A&apos;); print_r($ref-&gt;getConstants()); /* 输出： Array ( [&apos;STATUS_SUCCESS&apos;] =&gt; 1 [&apos;STATUS_FAILED&apos;] =&gt; 0 ) */ 但是， 使用 反射 的话，对性能影响可是很大的，如果只需要简单的判断是否存在某某名称的常量，可以这样操作： class A { const STATUS_SUCCESS = 1; const STATUS_FAILED = 0; public function checkStatus() { return defined(&quot;self::STATUS_SUCCESS&quot;); } } var_dump((new A)-&gt;checkStatus()); /* 输出： bool(true) */ 通过这种方法，能简单的判断是否出现是否存在常量。 have fun!]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP 对递归的优化]]></title>
    <url>%2F2016%2F05%2F31%2FPHP-%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[一、何为递归递归（recursion）在编程当中相当常见，当你的栈底看不见的时候，递归的作用显而易见。详解请参见维基百科 二、程序中的递归一function recursion($n) { if ($n == 0) { return $n; } $n--; return recursion($n) + $n; } echo recursion(11) ; 这样，就可以通过递归求出11+10+…..+2+1的结果。 但是，当你将 $n 改成 300 recursion(300) ; 的时候，这个时候会出现： Fatal error: Maximum function nesting level of &apos;256&apos; reached, aborting! 这是为什么呢？因为函数的调用需要运用 栈 来储存 函数的信息，当函数中包含 return recursion($n) + $n; 的时候，计算这个结果就必须保存上一次函数的调用才能进行 * 操作，因此 ，当 $n = 300 的时候，栈 就必须保存 300次函数调用的信息了，因为 栈 空间有限，从而导致程序出错。 那上面显示的错误，是 PHP 的保护机制。 三、程序中的递归二 — 尾递归将上述代码改成： function recursion2($n, $result = 0) { if ($n == 0) { return $result; } $n--; $result += $n; return recursion2($n, $result); } echo recursion2(253); 同样运行 ， 当 $n = 255 以上， 就会出现 Fatal error: Maximum function nesting level of &#39;256&#39; reached, aborting! 错误。 但是，上面的这样写法，属于尾递归函数，将结果集传到函数的中，C/C++ ， java 等语言对 尾递归 有优化， 不过，PHP/Python 不对尾递归做优化，所以，问题同样存在。 四、回避递归中的层级限制接下来，请看如下方法： function recursion3($n) { function interRecursion($n, $result = 0) { if ($n == 0) { return $result; } $n--; $result += $n; return function () use ($n, $result) { return interRecursion($n, $result); }; } $result = call_user_func(&apos;interRecursion&apos;, $n); while (is_callable($result)) { $result = $result(); } return $result; } echo recursion3(1255); 以上方法，就不会产生 层数的限制。和 Ptyhon 当中的 装饰器 一样。如果对 call_user_func 这样的函数不太了解的话，可以先看看 php.net 。 五、测试文件下载recursion.php]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP 关于行为扩展 app_begin 标签不能使用 session 的问题]]></title>
    <url>%2F2016%2F04%2F06%2FThinkPHP-%E5%85%B3%E4%BA%8E%E8%A1%8C%E4%B8%BA%E6%89%A9%E5%B1%95-app_begin-%E6%A0%87%E7%AD%BE%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8-session-%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[ThinkPHP 中有一个叫行为扩展的功能模块，其实就是设计模式当中的“监听者模式” （当然啦，这个还是处于十分粗糙的），对于网站的初始化等处理还是挺有用处的。 当中有一个行为标签叫 app_begin ，见名知意，就是在整个应用最开始时执行的操作。 但是有个缺憾，在 app_begin 这个标签的 Behavior 无法执行 session 的 增删改查 ，到底为何呢？ 可以查看 TP 的源码： ThinkPHP/Library/Think/ App.class.php 12345678910111213141516171819202122232425/** * 运行应用实例 入口文件使用的快捷方法 * @access public * @return void*/public static function run()&#123; // 加载动态应用公共文件和配置 load_ext_file(COMMON_PATH); // 应用初始化标签 Hook::listen('app_init'); App::init(); // 应用开始标签 Hook::listen('app_begin'); // Session初始化 if (!IS_CLI) &#123; session(C('SESSION_OPTIONS')); &#125; // 记录应用初始化时间 G('initTime'); App::exec(); // 应用结束标签 Hook::listen('app_end'); return;&#125; 这里注意，先执行了 Hoop:listen(‘app_begin’) ， 再执行 session(C(‘SESSION_OPTIONS’)) 的 session 初始化，因此，在 app_begin 的 Behavior 是不能使用 session 的。 如果需要令到 app_begin 当中的 session 操作生效，必须 将运行的顺序交换一下，如： 12345678910111213141516171819202122232425/** * 运行应用实例 入口文件使用的快捷方法 * @access public * @return void*/public static function run()&#123; // 加载动态应用公共文件和配置 load_ext_file(COMMON_PATH); // 应用初始化标签 Hook::listen('app_init'); App::init(); // Session初始化 if (!IS_CLI) &#123; session(C('SESSION_OPTIONS')); &#125; // 应用开始标签 Hook::listen('app_begin'); // 记录应用初始化时间 G('initTime'); App::exec(); // 应用结束标签 Hook::listen('app_end'); return;&#125;]]></content>
      <categories>
        <category>PHP</category>
        <category>Thinkphp</category>
      </categories>
      <tags>
        <tag>session</tag>
        <tag>app_begin</tag>
        <tag>behaveior</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下安装 python3]]></title>
    <url>%2F2016%2F02%2F10%2FMac%E4%B8%8B%E5%AE%89%E8%A3%85-python3%2F</url>
    <content type="text"><![CDATA[还是一个老生常谈的问题，究竟使用 python3 还是 python2 好呢？假如你用的 nix 平台，当然， 2和 3 可以并存。 有鉴于本人使用的是 Mac ， 所以介绍的还是如何在 Mac 下安装 python3 。 安装方法 Homebrew 安装 执行： brew search python 返回结果： 再执行： brew install python3 python 3 这样就安装完成了，当你想进入命令行模式的时候，请用 python3 安装 pip python 下有一个包管理工具：pip ，当然，pip 也有 python3 的版本 pip3 当你使用 homebrew 安装 python3 的时候， pip3 其实也已经安装好了，请尝试命令： pip3 install BeautifulSoup4 好啦，你马上就可以尝试使用 python3 来编写 爬虫了！]]></content>
      <categories>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[中国省市区 最新版 数据库 SQL文件 截止 201504]]></title>
    <url>%2F2016%2F01%2F05%2F%E4%B8%AD%E5%9B%BD%E7%9C%81%E5%B8%82%E5%8C%BA-%E6%9C%80%E6%96%B0%E7%89%88-%E6%95%B0%E6%8D%AE%E5%BA%93-SQL%E6%96%87%E4%BB%B6-%E6%88%AA%E6%AD%A2-201504%2F</url>
    <content type="text"><![CDATA[根据 国家统计局 来制作的最新中国省市区数据库 原始数据不包含 所属关系 ，即数据库中没有 PID 相互的关联。 以下是原始数据（没有PID）： region-origin-no-pid.sql 再提供一个经由我从省份的编号计算出来的，含所属关系(PID)的数据库，算法如下： 123456789101112131415161718192021222324252627282930313233//查找省$province = DB::select("select * from region WHERE `code` LIKE '%0000'");foreach ($province as $key=&gt;$val) &#123; //省的识别码,如广东省,为 44 开头 $provinceCode = substr($val-&gt;code,0,2); $areaInProvinces = DB::select("select * from region WHERE `code` LIKE '&#123;$provinceCode&#125;%' AND `code` NOT LIKE '%0000' "); //如果省份内包含市/区 if ($areaInProvinces) foreach ($areaInProvinces as $areaInProvinceKey =&gt; $areaInProvince) &#123; //后3位为 0 if ( substr($areaInProvince-&gt;code,-3) == '000' ) &#123; //先更新所属 DB::update("update region set pid = '".$val-&gt;id."' where id = '".$areaInProvince-&gt;id."'"); $code = substr($areaInProvince-&gt;code,0,3); DB::update("update region set pid = '&#123;$areaInProvince-&gt;id&#125;' WHERE `code` LIKE '&#123;$code&#125;%' AND `code` NOT LIKE '%000' "); continue; &#125; //后2位为 0 if ( substr($areaInProvince-&gt;code,-2) == '00' ) &#123; //先更新所属 DB::update("update region set pid = '".$val-&gt;id."' where id = '".$areaInProvince-&gt;id."'"); $code = substr($areaInProvince-&gt;code,0,4); DB::update("update region set pid = '&#123;$areaInProvince-&gt;id&#125;' WHERE `code` LIKE '&#123;$code&#125;%' AND `code` NOT LIKE '%00' "); continue; &#125; &#125;&#125; 下载： region201504.sql]]></content>
      <categories>
        <category>Mysql</category>
        <category>PHP</category>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[npm 慢成狗，let's 更换 npm 淘宝源]]></title>
    <url>%2F2015%2F12%2F18%2Fnpm-%E6%85%A2%E6%88%90%E7%8B%97lets-%E6%9B%B4%E6%8D%A2-npm-%E6%B7%98%E5%AE%9D%E6%BA%90%2F</url>
    <content type="text"><![CDATA[中国网络差真系不是说笑的，用 npm 下载3个包竟然要半小时，受不了。因此我们需要为 npm 更换一个淘宝源。 理论上，加入你要安装 koa ，可以这样做： npm –registry=https://registry.npm.taobao.org install koa 然后，秒速的就下载完，但是你会发现，每次 install 都要加 –registry=https://registry.npm.taobao.org ，这么麻烦？来一个一劳永逸的方法，直接安装淘宝的 cnpm ，运行： npm install -g cnpm –registry=https://registry.npm.taobao.org 等到完成后，你就可以使用 cnpm 来代替 npm 命令来下载了，如上例 koa , 可以使用如下命令安装： cnpm install koa 这样，其实命令就等价于： npm –registry=https://registry.npm.taobao.org install koa 至此，OVER，大家可以去看看淘宝源网址：http://npm.taobao.org/]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 删除原生的 nodejs 或者 通过 pkg 安装的 nodejs]]></title>
    <url>%2F2015%2F12%2F18%2FMac-%E5%88%A0%E9%99%A4%E5%8E%9F%E7%94%9F%E7%9A%84-nodejs-%E6%88%96%E8%80%85-%E9%80%9A%E8%BF%87-pkg-%E5%AE%89%E8%A3%85%E7%9A%84-nodejs%2F</url>
    <content type="text"><![CDATA[使用Laravel 5.1 的时候，免不了和 gulp 打交道，因此，系统当中必须要有好的 nodejs 啊，原生的 npm 和 nodejs 是在太旧了，因此想用 homebrew 来管理 nodejs ，因此，我们需要先删除原来的 node ，步骤如下： sudo npm uninstall npm -gsudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*sudo rm -rf /usr/local/include/node /Users/$USER/.npmsudo rm /usr/local/bin/nodesudo rm /usr/local/share/man/man1/node.1sudo rm /usr/local/lib/dtrace/node.dsudo rm /usr/local/share/systemtap/tapset/node.stpsudo rm /usr/local/share/doc/node/gdbinit 然后，就可以通过 homebrew 来安装 nodejs 了： brew install nodenode -v]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
        <tag>gulp</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 下安装 dnsmasq 来配置开发环境]]></title>
    <url>%2F2015%2F11%2F23%2FMac-%E4%B8%8B%E5%AE%89%E8%A3%85-dnsmasq-%E6%9D%A5%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[由于实际的开发当中，可能存在多个项目的情况，如果是在本地自行搭建的坏境的话，就很有可能需要使用多个域名了，当然，也可以是 localhost / localhost:81 / localhost:82 这样来访问多个项目。其实，有更加便捷的方法（忽略自行修改/etc/hosts，这种哈，会改死人的），使用一个管理dns的工具： dnsmasq。 1 、安装dnsmasq 已经默认各位Mac下有homebrew , 安装： 1brew install dnsmasq 2、复制配置文件 1sudo cp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf 3、编辑配置文件 1sudo vim /usr/local/etc/dnsmasq.conf 修改（去除address=前的#）： 1234# Add domains which you want to force to an IP address here.# The example below send any host in double-click.net to a local# web-server.address=/dev/127.0.0.1 #这样的意思就是访问 ********.dev 直接引导到 127.0.0.0 4、新建dns文件 12sudo mkdir -p /etc/resolversudo vim /etc/resolver/dev （PS：这里新建的文件叫 dev , 因为我配置的域名结尾是 .dev，假如大家配置的是 .app ，这里新文件应该叫：app。同理，如果配置多个域名后续，就必须写入多个文件哦！） 写入： 1nameserver 127.0.0.1 5、编辑开机自启动 123sudo cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemonssudo chown root /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plistsudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist 6、如果修改了配置文件，可以自行控制 12sudo launchctl stop homebrew.mxcl.dnsmasqsudo launchctl start homebrew.mxcl.dnsmasq 7、测试 1ping abcd.dev 发现指向： 127.0.0.1]]></content>
      <categories>
        <category>Linux/Unix</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python3 的文件/目录操作]]></title>
    <url>%2F2015%2F10%2F11%2FPython3-%E7%9A%84%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[最近不知为何，忽然爱上了 Python ， 无论做小爬虫，还是简单的文件处理都是很尝心悦目的。 不过，还是不太熟悉python的包和函数，来来来，让我 markdown 一下： 文件头，请导入： import os import shutil #创建空文件 os.mknod(&quot;test.txt&quot;) #直接打开一个文件，如果文件不存在则创建文件 open(&quot;test.txt&quot;,w) #创建目录 os.mkdir(&quot;file&quot;) #创建多层目录 def mkdirs(path): # 去除首位空格 path=path.strip() #去除尾部 \ 符号 path=path.rstrip(&quot;\\&quot;) #判断路径是否存在 #存在 True #不存在 False isExists=os.path.exists(path) #判断结果 if not isExists: # 创建目录操作函数 os.makedirs(path) #如果不存在则创建目录 print path + u&apos; 创建成功&apos; return True else: #如果目录存在则不创建，并提示目录已存在 print path + u&apos; 目录已存在&apos; return False #复制文件： shutil.copyfile(&quot;oldfile&quot;,&quot;newfile&quot;) #oldfile和newfile都只能是文件 shutil.copy(&quot;oldfile&quot;,&quot;newfile&quot;) #oldfile只能是文件夹，newfile可以是文件，也可以是目标目录 #复制文件夹： shutil.copytree(&quot;olddir&quot;,&quot;newdir&quot;) # olddir和newdir都只能是目录，且newdir必须不存在 #重命名文件（目录） os.rename(&quot;oldname&quot;,&quot;newname&quot;) # 文件或目录都是使用这条命令 #移动文件（目录） shutil.move(&quot;oldpos&quot;,&quot;newpos&quot;) #删除文件 os.remove(&quot;file&quot;) #删除目录 os.rmdir(&quot;dir&quot;) #只能删除空目录 shutil.rmtree(&quot;dir&quot;) #空目录、有内容的目录都可以删 #转换目录 os.chdir(&quot;path&quot;) #换路径 #判断目标 os.path.exists(&quot;goal&quot;) #判断目标是否存在 os.path.isdir(&quot;goal&quot;) #判断目标是否目录 os.path.isfile(&quot;goal&quot;) #判断目标是否文件 #PS: 若路径中含中文，在windows环境（编码为GBK）下，要将目录编码成GBK，如：dir.encode(&apos;GBK&apos;) #遍历目录 root = os.path.abspath(&quot;.&quot;) #本获取本目录 for rootpath, dirs, files in os.walk(root): #遍历目录 for dir in dirs: print(dir) #遍历文件 for file in files: print(file) 欢迎大家补充。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>文件遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linode的centos 更新防火墙时出现错误：security raw nat mangle fi]]></title>
    <url>%2F2015%2F09%2F29%2FLinode%E7%9A%84centos-%E6%9B%B4%E6%96%B0%E9%98%B2%E7%81%AB%E5%A2%99%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%EF%BC%9Asecurity-raw-nat-mangle-fi%2F</url>
    <content type="text"><![CDATA[主要原因在于linode修改过centos的内核，导致 iptables和原来的不太一样，解决方案： vim /etc/init.d/iptables 查找：case “$i” in ， 将如下内容， for i in $tables; do echo -n “$i “ case “$i” in raw) $IPTABLES -t raw -P PREROUTING $policy \ &amp;&amp; $IPTABLES -t raw -P OUTPUT $policy \ || let ret+=1 ;; filter) $IPTABLES -t filter -P INPUT $policy \ &amp;&amp; $IPTABLES -t filter -P OUTPUT $policy \ &amp;&amp; $IPTABLES -t filter -P FORWARD $policy \ || let ret+=1 ;; nat) 修改成： for i in $tables; do echo -n “$i “ case “$i” in security) $IPTABLES -t filter -P INPUT $policy \ &amp;&amp; $IPTABLES -t filter -P OUTPUT $policy \ &amp;&amp; $IPTABLES -t filter -P FORWARD $policy \ || let ret+=1 ;; raw) $IPTABLES -t raw -P PREROUTING $policy \ &amp;&amp; $IPTABLES -t raw -P OUTPUT $policy \ || let ret+=1 ;; filter) $IPTABLES -t filter -P INPUT $policy \ &amp;&amp; $IPTABLES -t filter -P OUTPUT $policy \ &amp;&amp; $IPTABLES -t filter -P FORWARD $policy \ || let ret+=1 ;; nat) 保存，重启 /etc/init.d/iptables restart 大功告成！]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>linode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装phalcon时出现‘ZEND_FE_END’ undeclared here (not in a function)]]></title>
    <url>%2F2015%2F09%2F05%2F%E5%AE%89%E8%A3%85phalcon%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%98ZEND_FE_END%E2%80%99-undeclared-here-(not-in-a-function)%2F</url>
    <content type="text"><![CDATA[出现这个问题的首要原因是phalcon不支持php5.3所导致的，大家可能觉得好奇怪，为何明明我的运行环境是php5.6，phalcon找到的却是5.3呢? 原因很简单，大家请到在终端输入: php -v 查看一下，你会发现你先上运行的环境和 php cli是不一样（我是centos 6.5），具体原因不谈谈，只需知道phalcon认错php了。因此，你的安装方式需要更改了！ 一、查找php-config 首先，你要查找到你php-fpm 或 php-cgi 是用哪个php-config的，终端输入： sudo find / -name php-config 然后看看找到哪些路径，这个时候肯定有2个php-config的路径，因为php有2个版本存在于你的系统当中。假设，找到的php-config如下： /usr/local/php/bin/php-config/usr/bin/php-config 这个时候可以，我们就可以清晰的知道，/usr/bin/php-config 是不正确的，因为系统默认就是这个。 二、指定配置文件来安装 git clone –depth 1 –branch phalcon-v2.0.3 https://github.com/phalcon/cphalcon.gitcd cphalcon/extphpize./configure –with-php-config=/usr/local/php/bin/php-config #此处更改了php-config的位置make &amp;&amp; make install 这样就编译完成了。这个时候就不会出现编译错误了。 三、将扩张添加到php.ini [phalcon]extension=phalcon.so 四、重启php ，查看 phpinfo() ，大功告成，慢慢享受phalcon吧，哈哈哈~]]></content>
      <categories>
        <category>phalcon</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>phalcon</tag>
        <tag>php-config</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS一分钟更换163的yum源]]></title>
    <url>%2F2015%2F08%2F29%2FCentOS%E4%B8%80%E5%88%86%E9%92%9F%E6%9B%B4%E6%8D%A2163%E7%9A%84yum%E6%BA%90%2F</url>
    <content type="text"><![CDATA[1.下载repo文件： .代码如下: wget http://mirrors.163.com/.help/CentOS6-Base-163.repo //根据自己的需要哦。本人用的是centos 6.5的 2.备份并替换系统的repo文件 .代码如下: [root@localhost ~]# cd /etc/yum.repos.d/ [root@localhost ~]# mv CentOS-Base.repo CentOS-Base.repo.bak [root@localhost ~]# mv CentOS6-Base-163.repo CentOS-Base.repo 3.执行yum源更新 .代码如下: [root@localhost ~]# yum clean all [root@localhost ~]# yum makecache [root@localhost ~]# yum update]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[谷歌支付 Google Play In-app Billing 服务端验证（PHP描述）]]></title>
    <url>%2F2015%2F08%2F07%2F%E8%B0%B7%E6%AD%8C%E6%94%AF%E4%BB%98-Google-Play-In-app-Billing-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%AA%8C%E8%AF%81%EF%BC%88PHP%E6%8F%8F%E8%BF%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前提好了，二话不说，先扔一个链接： https://developer.android.com/google/play/billing/billing_reference.html#getBuyIntent 以上是谷歌支付 Google Play In-app Billing 的服务器验证说明文档。 支付的时候，Android 客户端 通过调用 getBuyIntent() 方法获得以下 3个 参数： RESPONSE_CODE INAPP_PURCHASE_DATA INAPP_DATA_SIGNATURE 详细说明： 其中，INAPP_PURCHASE_DATA 是一段 json 字符串，包含订单的信息，具体内容如下： 有几个字段我们必须关注的： developerPayload : 这个是客户端的透传参数，建议放置自身的交易流水号（自有服务器的订单号） purchaseState ：支付的结果， 0 (支付了)， 1 (取消)， 2 (退款) productId ：商品ID orderId : 谷歌的订单ID （Ps: 当处于沙箱环境的时候，没有这个字段） 验证作为服务端，需要接收 客户端 将 INAPP_PURCHASE_DATA 和 INAPP_DATA_SIGNATURE 参数。 以下是 PHP 服务端的实例： 12345678910111213141516171819202122232425262728293031323334&lt;?phpfunction checkGooglePlayBilling() &#123; $inappPurchaseData = isset($_REQUEST['INAPP_PURCHASE_DATA']) ? $_REQUEST['INAPP_PURCHASE_DATA'] : null ; $inappDataSignature =isset($_REQUEST['INAPP_DATA_SIGNATURE']) ? $_REQUEST['INAPP_DATA_SIGNATURE'] : null ; $googlePublicKey = 'Google Play Developer Console 中此应用的许可密钥'; $publicKey = "-----BEGIN PUBLIC KEY-----". PHP_EOL . chunk_split($google_public_key, 64, PHP_EOL) . "-----END PUBLIC KEY-----"; $publicKeyHandle = openssl_get_publickey($publicKey); $result = openssl_verify($inappPurchaseData, base64_decode($inappDataSignature), $publicKeyHandle, OPENSSL_ALGO_SHA1); if (1 !== $result) &#123; retuan false; &#125; $data = json_decode(inappPurchaseData, true); if (json_last_error() !== JSON_ERROR_NONE) &#123; return false; &#125; //判断订单号，订单情况，自行解决 if ($data['developerPayload'] != 'xxxx') &#123; return false; &#125; //判断订单完成情况 if ($data['purchaseState'] != 0) &#123; return false; &#125; return true;&#125; 进阶当然，如果需要进一步的验证的话，可以通过 Google Play Developer API 来验证订单的真实情况。 以下是 Google Play Developer API 验证订单接口的文档： https://developers.google.com/android-publisher/api-ref/purchases/products/get 从安全角度考虑，可以考虑接入这一部分。不过，使用这些 API 的话，还需要 服务端 获取 Oauth2.0 的 Server to Server 的 Access token, 这部分暂时没有深入研究，但是其实也不难，具体的文档如下： https://developers.google.com/identity/protocols/OAuth2ServiceAccount#authorizingrequests 通过 生成 JWT 来获取请求 access token。 日后补充 这部分。 Have fun!!!]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP 数组游标]]></title>
    <url>%2F2015%2F07%2F15%2FPHP-%E6%95%B0%E7%BB%84%E6%B8%B8%E6%A0%87%2F</url>
    <content type="text"><![CDATA[某次面试的过程中，被问到关于 数组游标的问题，我还傻乎乎的写了个 $a[count($a)-1] ，以为[ ] 就是游标，那个尴尬简直绕梁3日。所以要mark 一下何为 “游标” ！ 一、那什么是“游标”呢？ 当定义一个数组的时候，数组当中包含一个所谓的“指针”，初始化的时候指向数组当中下表为0的值。 例如： $transport = array(&apos;foot&apos;, &apos;bike&apos;, &apos;car&apos;, &apos;plane&apos;); 这个时候，游标就指向 foot 这个值哦。 二、如何操作游标？ 讲到操作游标，必须知道一下几个函数，还是上面的数组： $transport = array(‘foot’, ‘bike’, ‘car’, ‘plane’);$mode = current($transport); // $mode = ‘foot’;$mode = next($transport); // $mode = ‘bike’;$mode = current($transport); // $mode = ‘bike’;$mode = prev($transport); // $mode = ‘foot’;$mode = end($transport); // $mode = ‘plane’;$mode = current($transport); // $mode = ‘plane’; end() - 将数组的内部指针指向最后一个单元 key() - 从关联数组中取得键名 each() - 返回数组中当前的键／值对并将数组指针向前移动一步 prev() - 将数组的内部指针倒回一位 reset() - 将数组的内部指针指向第一个单元 next() - 将数组中的内部指针向前移动一位 current() — 返回数组中的当前单元 然后，大家是不是廓然开朗啦？哈哈~我也是！ 再然后，具体例子请看：http://php.net/manual/zh/function.current.php]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP 3.2 如何使用自定义类，应该放置在什么目录]]></title>
    <url>%2F2015%2F07%2F09%2FThinkPHP-3.2-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%BA%94%E8%AF%A5%E6%94%BE%E7%BD%AE%E5%9C%A8%E4%BB%80%E4%B9%88%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[TP 一直觉得是PHP入门的最佳框架，很适合国内的敏捷开发环境！ 曾经有一个问题，就是，如果我需要自定义一个类，那我应该放置在哪个目录？然后在控制器当中应该如何引用呢？ 一、自定义类放置的目录： 我们需要在项目的模块下（默认是Home）下新建一个叫”Lib”的文件夹，然后往里面放置我们的类，当然，明明规则用TP默认的明明规则，加入我们的类名叫：myclass ，我们的类文件名就叫：myclass.class.php 二、 如何编写自定义类 直接上代码比较快，请注意：一定要写明明空间！ 123456789namespace Home\\Lib;class myclass&#123; public function __construct()&#123; echo 1; &#125;&#125; 三、如何引用自定义类 还是看代码，以下是indexController： 12345678910namespace Home\\Controller;use Think\\Controller;class IndexController extends Controller &#123; public function index()&#123; $class = new \\Home\\Lib\\myclass(); &#125;&#125; 我只能讲，就这么简单，那些使用什么 improt 函数的方法太复杂了~~个人不太喜欢使用，推荐大家使用这种方法！！]]></content>
      <categories>
        <category>Thinkphp</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Laravel 如何方便的使用SASS ( 使用elixir && gulp )]]></title>
    <url>%2F2015%2F07%2F05%2FLaravel-%E5%A6%82%E4%BD%95%E6%96%B9%E4%BE%BF%E7%9A%84%E4%BD%BF%E7%94%A8SASS-(-%E4%BD%BF%E7%94%A8elixir-%26%26-gulp-)%2F</url>
    <content type="text"><![CDATA[Laravel 中有很多是否好用的工具，真是得laravel者得天下（哈哈哈~~）。 小弟用的版本是 laravel 5.1 。 以下亲自测试可用： 一、安装 node.js 因为elixir 建基础于 gulp ，而 gulp 是nodejs的产物，所以需要到http://nodejs.org 中安装，请点击图片中“ install “即可 然后在终端 或者 cmd 中运行 node -v 确实是否安装成功，成功如下图： 二、安装 gulp 终端 或者 cmd 中运行 npm install –global gulp ，成功的时候得到如下结果： 三、安装 laravel5 目录下的 node.js 配置依赖，配置文件为：package.json ，大家可以打开看看； 1、首先进入 laravel 所在目录 2、然后运行：npm install PS: 如果在mac下，可能还要： sudo chown -R $USER ~/.npmsudo chown -R $USER /usr/local 3、结果如下： （第一行的错误不知道是啥，知道的告知一声） PS： 由于国内网络的G**，所以，一定要要VPN才能连上npm的源哦，否则会一直报错！谨记！！！！！ 四、配置 laravel 根目录下的 gulpfile.js 的配置文件，laravel 5.1的时候是这样的： elixir(function(mix) { mix.sass(‘app.scss’);}); 可以改成这样： elixir(function(mix) { mix.sass(‘app.scss’) .version(‘css/app.css’) //添加自动更替版本号，保存在 public/build/css/app-xxxxx.css ;}); 五、编写sass文件，随便在 resources/assets/sass/app.sass 中编写： //@import “node_modules/bootstrap-sass/assets/stylesheets/bootstrap”;//此为bootstrap的css文件，按照项目需求选择是否包含 .header { .left{ color: #fff; } .middle{ color: #fff; } .right{ }} 六、然后 在终端或者 cmd 中运行 : gulp ，结果如下： 大功告成，现在 pulice/css/中已经 存在由app.sass编译已成的 app.css，可以直接引用到项目当中 然后，因为我们刚刚在 gulpfile.js 文件当中加入 了 version 进行版本控制，因此，会在 public/build/css/中出现以下文件： 七、在项目模板中引用 CSS 文件： 1、方法一，直接引用非版本控制的css ： pulice/css/app.css 2、方法二，引用版本控制的css , elixir 是全局helper中的方法，用于获得版本控制的css，读出public/build/rev-manifest.json 文件中从而引入文件 八、监控sass 文件 那是否每一次我们更改app.sass文件都要手动在终端中输入 gulp 来编译呢？非也非也 我们可以运行 gulp watch , 运行结果如下： 这样，每次我们对ass.sass进行更改，gulp 就会对其自动进行编译了，我们刷新页面也能马上看到效果哦！！ laravel 5.1 兼职就是神器！]]></content>
      <categories>
        <category>laravel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[在Nginx 下运行 Laravel5.1 的配置]]></title>
    <url>%2F2015%2F06%2F29%2F%E5%9C%A8Nginx-%E4%B8%8B%E8%BF%90%E8%A1%8C-Laravel5.1-%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、nginx 的 vhost.conf 配置： server { listen 80; server_name sub.domain.com; set $root_path &apos;/srv/www/default&apos;; root $root_path; index index.php index.html index.htm; try_files $uri $uri/ @rewrite; location @rewrite { rewrite ^/(.*)$ /index.php?_url=/$1; } location ~ \\.php { fastcgi_pass 127.0.0.1:9000; fastcgi_index /index.php; fastcgi\_split\_path_info ^(.+\\.php)(/.+)$; fastcgi\_param PATH\_INFO $fastcgi\_path\_info; fastcgi\_param PATH\_TRANSLATED $document\_root$fastcgi\_path_info; fastcgi\_param SCRIPT\_FILENAME $document\_root$fastcgi\_script_name; include fastcgi_params; } location ~* ^/(css|img|js|flv|swf|download)/(.+)$ { root $root_path; } location ~ /\\.ht { deny all; } } 二、测试： 在CentOS6.5 + Nginx1.8.0 +Laravel5.1测试通过 在windows 7 +Nginx1.6.5+Laravel5.1测试通过]]></content>
      <categories>
        <category>laravel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac 下开发工具最佳实践]]></title>
    <url>%2F2015%2F05%2F06%2FMac-%E4%B8%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[自从使用了 Mac 来做开发环境之后，感觉是回不去了，各种开源的软件都建基于 *inx 系统，例如想玩 Swoole ？嘿嘿，自己收集一下比较有感觉的软件： 一、GUI ： Sequel Pro : Mysql GUI , 最好用了。 MysqlWorkbench, 真心一般般，太繁琐。 phpMyAdmin: Mysql Web GUI, 请原谅我是一个 PHPer。 phpRedisAdmin: Redis Web GUI , 同上。 Beanstalk console: Beanstalk Web GUI, 同上。 Robomongo: mongoDB GUI SmartGit：Git GUI，超级好用，比sourceTree好用多了，提交树清晰可见 二、IDE： phpstorm： 最好的PHP IDE ，没有之一。 webstorm with go plugins : 个人觉得用来写 Golang 挺爽的。 Sublime Text 3: 编辑小文件 Markdown Plus : MD GUI ，使用有点卡，一般般。 OpenOffice: MS Office 的替代品。 Xmind: 思维导图 三、Tool : FileZilla : FTP, SFTP 利器 Item : 终端替代品，不过我还是觉得Mac 自带的挺好用 Ichm：Mac 下查看 CHM 文件 KDiff3 : 文件对比 四、Entertainment: VLC ：看视频 iTurns ：听歌只能用这个了，哭。。]]></content>
      <categories>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac 下让终端 ls 命令对不同文件类型着色]]></title>
    <url>%2F2015%2F02%2F24%2FMac-%E4%B8%8B%E8%AE%A9%E7%BB%88%E7%AB%AF-ls-%E5%91%BD%E4%BB%A4%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%9D%80%E8%89%B2%2F</url>
    <content type="text"><![CDATA[打开终端，输入： 1vim .bash_profile 然后编辑，一般分2种情况，背景喜欢黑色的和背景喜欢白色的： 1234567#黑色背景的可以这样export CLICOLOR=1export LSCOLORS=GxFxCxDxBxegedabagaced#白色背景的可以这样export CLICOLOR=1export LSCOLORS=GxFxCxDxBxegedabagaced 然后退出，执行： 1source .bash_profile 这样就能看到 ls 命令的不同着色了。 可能大家有疑问，究竟上面的命令究竟是什么意思？ 自定义终端命令颜色 “exfxcxdxbxegedabagacad”是终端默认的，下面给出的各个字母代表指代的不同颜色 a blackb redc greend browne bluef magentag cyanh light greyA bold black, usually shows up as dark greyB bold redC bold greenD bold brown, usually shows up as yellowE bold blueF bold magentaG bold cyanH bold light grey; looks like bright whitex default foreground or background LSCOLOR上方各个字母的次序指代的不同命令： 1. directory2. symbolic link3. socket4. pipe5. executable6. block special7. character special8. executable with setuid bit set9. executable with setgid bit set10. directory writable to others, with sticky bit11. directory writable to others, without sticky]]></content>
      <categories>
        <category>Linux/Unix</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>.bash_profile</tag>
        <tag>ls</tag>
        <tag>mac</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL触发器]]></title>
    <url>%2F2014%2F12%2F25%2FMySQL%E8%A7%A6%E5%8F%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[MySQL包含对触发器的支持。触发器是一种与表操作有关的数据库对象，当触发器所在表上出现指定事件时，将调用该对象，即表的操作事件触发表上的触发器的执行。 创建触发器在MySQL中，创建触发器语法如下： CREATE TRIGGER trigger_nametrigger_timetrigger_event ON tbl_nameFOR EACH ROWtrigger_stmt 其中： trigger_name：标识触发器名称，用户自行指定； trigger_time：标识触发时机，取值为 BEFORE 或 AFTER； trigger_event：标识触发事件，取值为 INSERT、UPDATE 或 DELETE； tbl_name：标识建立触发器的表名，即在哪张表上建立触发器； trigger_stmt：触发器程序体，可以是一句SQL语句，或者用 BEGIN 和 END 包含的多条语句。 由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。 另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。 trigger_event 详解MySQL 除了对 INSERT、UPDATE、DELETE 基本操作进行定义外，还定义了 LOAD DATA 和 REPLACE 语句，这两种语句也能引起上述6中类型的触发器的触发。 LOAD DATA 语句用于将一个文件装入到一个数据表中，相当与一系列的 INSERT 操作。 REPLACE 语句一般来说和 INSERT 语句很像，只是在表中有 primary key 或 unique 索引时，如果插入的数据和原来 primary key 或 unique 索引一致时，会先删除原来的数据，然后增加一条新数据，也就是说，一条 REPLACE 语句有时候等价于一条。 INSERT 语句，有时候等价于一条 DELETE 语句加上一条 INSERT 语句。 INSERT 型触发器：插入某一行时激活触发器，可能通过 INSERT、LOAD DATA、REPLACE 语句触发； UPDATE 型触发器：更改某一行时激活触发器，可能通过 UPDATE 语句触发； DELETE 型触发器：删除某一行时激活触发器，可能通过 DELETE、REPLACE 语句触发。 BEGIN … END 详解在MySQL中，BEGIN … END 语句的语法为： BEGIN[statement_list]END 其中，statement_list 代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾。 而在MySQL中，分号是语句结束的标识符，遇到分号表示该段语句已经结束，MySQL可以开始执行了。因此，解释器遇到statement_list 中的分号后就开始执行，然后会报出错误，因为没有找到和 BEGIN 匹配的 END。 这时就会用到 DELIMITER 命令（DELIMITER 是定界符，分隔符的意思），它是一条命令，不需要语句结束标识，语法为： DELIMITER new_delemiter new_delemiter 可以设为1个或多个长度的符号，默认的是分号（;），我们可以把它修改为其他符号，如$： DELIMITER $ 在这之后的语句，以分号结束，解释器不会有什么反应，只有遇到了$，才认为是语句结束。注意，使用完之后，我们还应该记得把它给修改回来。 一个完整的创建触发器示例假设系统中有两个表： 班级表 class(班级号 classID, 班内学生数 stuCount) 学生表 student(学号 stuID, 所属班级号 classID) 要创建触发器来使班级表中的班内学生数随着学生的添加自动更新，代码如下： DELIMITER $create trigger tri_stuInsert after inserton student for each rowbegindeclare c int;set c = (select stuCount from class where classID=new.classID);update class set stuCount = c + 1 where classID = new.classID;end$DELIMITER ; 变量详解MySQL 中使用 DECLARE 来定义一局部变量，该变量只能在 BEGIN … END 复合语句中使用，并且应该定义在复合语句的开头， 即其它语句之前，语法如下： DECLARE var_name[,…] type [DEFAULT value] 其中： var_name 为变量名称，同 SQL 语句一样，变量名不区分大小写；type 为 MySQL 支持的任何数据类型；可以同时定义多个同类型的变量，用逗号隔开；变量初始值为 NULL，如果需要，可以使用 DEFAULT 子句提供默认值，值可以被指定为一个表达式。 对变量赋值采用 SET 语句，语法为： SET var_name = expr [,var_name = expr] … NEW 与 OLD 详解上述示例中使用了NEW关键字，和 MS SQL Server 中的 INSERTED 和 DELETED 类似，MySQL 中定义了 NEW 和 OLD，用来表示 触发器的所在表中，触发了触发器的那一行数据。 具体地： 在 INSERT 型触发器中，NEW 用来表示将要（BEFORE）或已经（AFTER）插入的新数据； 在 UPDATE 型触发器中，OLD 用来表示将要或已经被修改的原数据，NEW 用来表示将要或已经修改为的新数据； 在 DELETE 型触发器中，OLD 用来表示将要或已经被删除的原数据； 使用方法： NEW.columnName （columnName 为相应数据表某一列名） 另外，OLD 是只读的，而 NEW 则可以在触发器中使用 SET 赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。 查看触发器和查看数据库（show databases;）查看表格（show tables;）一样，查看触发器的语法如下： SHOW TRIGGERS [FROM schema_name]; 其中，schema_name 即 Schema 的名称，在 MySQL 中 Schema 和 Database 是一样的，也就是说，可以指定数据库名，这样就 不必先“USE database_name;”了。 删除触发器和删除数据库、删除表格一样，删除触发器的语法如下： DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name 触发器的执行顺序我们建立的数据库一般都是 InnoDB 数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL 会回滚事务，有： ①如果 BEFORE 触发器执行失败，SQL 无法正确执行。 ②SQL 执行失败时，AFTER 型触发器不会触发。 ③AFTER 类型的触发器执行失败，SQL 会回滚。 摘自：http://blog.163.com/csbqf@126/blog/static/6122437120131875924806/]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>InnoDB</tag>
        <tag>MyISAM</tag>
        <tag>Mysql</tag>
        <tag>trigger</tag>
        <tag>触发器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 实现消息队列 MQ]]></title>
    <url>%2F2014%2F12%2F03%2FRedis-%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-MQ%2F</url>
    <content type="text"><![CDATA[Redis 2.4版本之后就内置队列的功能了，如果是日常比较简单的队列应用，可以选择Redis , 效率还很高的！！ Redis 还能实现 有序 和 无序 两种队列（只讨论生产者和消费者这种模式的队列）： 一、有序队列： 1、生产者： $redis = new Redis();$redis-&gt;pconnect(‘127.0.0.1’, 6379);$redis-&gt;zAdd(‘MQ’, 1, ‘need to do 1’);$redis-&gt;zAdd(‘MQ’, 2, ‘need to do 2’); 2、消费者： while (true) { $pid = pcntl_fork(); if ($pid == -1) { //创建子进程失败，不处理 } else if ($pid == 0) { $redis = new Redis(); $redis-&gt;connect(‘127.0.0.1’, 6379); //执行有序查询，取出排序前10进行处理 $redis-&gt;zRevRangeByScore(‘MQ’, ‘+inf’, ‘-inf’, array(‘withscores’=&gt;false, ‘limit’=&gt;array(0,10))); exit; } else { //主进行执行中，等待 pcntl_wait($status); }} 二、无序队列： 1、生产者： $redis = new Redis();$redis-&gt;pconnect(‘127.0.0.1’, 6379);$redis-&gt;LPUSH(‘MQ’, 1, ‘need to do 1’);$redis-&gt;LPUSH(‘MQ’, 2, ‘need to do 2’); 2、消费者： while (true) { $pid = pcntl_fork(); if ($pid == -1) { //创建子进程失败，不处理 } else if ($pid == 0) { $redis = new Redis(); $redis-&gt;connect(‘127.0.0.1’, 6379); //执行出队处理，BLPOP是阻塞的出队方式，其实还可以用LPOP，不过用lPOP就要自行判断数据是否为空了 $mq = $redis-&gt;BLPOP(‘MQ’) //do something } else { //主进行执行中，等待 pcntl_wait($status); } } 简单版就是这样了~~当然，如果应用规模大，还是建议用正规的MQ，例如：RabbitMQ]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Redis 有序集合 ZADD]]></title>
    <url>%2F2014%2F11%2F23%2FRedis-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88-ZADD%2F</url>
    <content type="text"><![CDATA[Redis 的有序集合貌似很厉害，与SQL 中的order其实有点相似； 一、应用场景：排行榜 二、常用的函数命令： 1、ZADD ：添加一个或多个成员到有序集合，或者如果它已经存在更新其分数2、ZRANGE：由索引返回一个成员范围的有序集合3、ZREM：从有序集合中删除一个或多个成员 三、具体事例： redis 127.0.0.1:6379&gt; ZADD tutorials 1 redis //添加(integer) 1redis 127.0.0.1:6379&gt; ZADD tutorials 2 mongodb //添加(integer) 1redis 127.0.0.1:6379&gt; ZADD tutorials 3 mysql //添加(integer) 1redis 127.0.0.1:6379&gt; ZADD tutorials 3 mysql //更新分数(integer) 0redis 127.0.0.1:6379&gt; ZADD tutorials 4 mysql //更新分数(integer) 0redis 127.0.0.1:6379&gt; ZRANGE tutorials 0 10 WITHSCORES 1) “redis”2) “1”3) “mongodb”4) “2”5) “mysql”6) “4” redis 127.0.0.1:6379&gt; ZREM mongodb //删除(integer) 1redis 127.0.0.1:6379&gt; ZRANGE tutorials 0 10 WITHSCORES 1) “redis”2) “1”3) “mysql”4) “4”]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何用C写 PHP扩展]]></title>
    <url>%2F2014%2F11%2F15%2F%E5%A6%82%E4%BD%95%E7%94%A8C%E5%86%99-PHP%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[在我们编写自己的第一个php扩展之前，先了解一下php的整体架构和运行机制。 php的架构如图1所示。其中一个重要的就是SAPI（服务器端应用编程端口），它使得PHP可以和其他应用进行数据交互，把外部错综复杂的外部环境进行抽象化，为内部的php提供一套固定和统一的接口，使得php自身不受外部影响，保持一定的独立性。常见的SAPI有CGI，FastCGI，Shell的CLI，apache的mod_php5，IIS的ISAPI。 另外一个非常重要就是ZendEngine。Zend Engine是官方提供的PHP实现的核心，提供了语言实现上的基础设施，其他比较知名的还有facebook的hiphop实现。例如PHP的语法实现，脚本的编译运行环境，扩展机制以及内存管理等。我们在后面编写php扩展时，也将基于Zend Engine。 PHP3时代还是采用边解释边执行的运行方式，这种方式运行效率很受影响，其次代码整体耦合度比较高，可扩展性也不够好。因此随着php在web应用开发中的普及，于是ZeevSuraski和Andi Gutmans决定重写代码以解决这两个问题，最终他们俩把该项技术的核心引擎命名为Zend Engine 。 Zend Engine最主要的特性就是把PHP的边解释边执行的运行方式改为先预编译(Compile)，再执行(Execute)。这两者的分开给 PHP 带来了革命性的变化：执行效率大幅提高。由于实行了功能分离，降低了模块间耦合度，可扩展性也大大增强。 目前PHP的实现和Zend Engine之间的关系非常紧密，例如很多PHP扩展都是使用的Zend API，而Zend正是PHP语言本身的实现，PHP只是使用Zend这个内核来构建PHP语言的，而PHP扩展大都使用Zend API，这就导致PHP的很多扩展和Zend引擎耦合在一起了，后来才有PHP核心开发者就提出将这种耦合解开的建议。不过下面我们还下面在Zend Engine的基础上开始编写我们第一个简单的php扩展。 1.配置文件 每一个PHP扩展都至少需要一个配置文件和一个源文件。配置文件用来告诉编译器应该编译哪几个文件，以及编译本扩展是否需要的其它库文件。 在php源码文件夹的ext目录下创建一个新的文件，扩展的名字取作myfirst。然后在这个目录下创建一个config.m4文件，并输入以下内容： 123456789101112131415PHP_ARG_ENABLE( myfirst, [Whether to enable the &quot;myfirst&quot; extension], [enable-myfirst Enable&quot;myfirst&quot; extension support])if test $PHP_Myfirst !=&quot;no&quot;; then PHP_SUBST(Myfirst_SHARED_LIBADD) PHP_NEW_EXTENSION(myfirst, myfirst.c, $ext_shared)fi 上面PHP_ARG_ENABLE函数有三个参数，第一个参数是我们的扩展名(注意不用加引号)，第二个参数是当我们运行./configure脚本时显示的内容，最后一个参数则是我们在调用./configure–help时显示的帮助信息。PHP_SUBST函数只是php官方对autoconf中AC_SUBST函数的一层封装。PHP_NEW_EXTENSION函数声明了这个扩展的名称、需要的源文件名、扩展的编译形式。如果扩展使用了多个文件，可以将文件名罗列在函数的参数里，如：PHP_NEW_EXTENSION(sample, sample.c sample2.c sample3.c, $ext_shared)最后的$ext_shared参数用来声明这个扩展为动态库，在php运行时动态加载的。 2.源文件在完成了配置文件后，下面的就是完成扩展主逻辑的头文件和C文件。 头文件 1234567891011121314151617181920212223//php_myfirst.h#ifndef Myfirst_H#define Myfirst_H//加载config.h，如果配置了的话#ifdef HAVE_CONFIG_H#include "config.h"#endif//加载php头文件#include "php.h"#define phpext_myfirst_ptr &amp;myfirst_module_entryextern zend_module_entrymyfirst_module_entry;#endif C文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445//myfirst.c#include "php_myfirst.h"//module entryzend_module_entrymyfirst_module_entry = &#123;#if ZEND_MODULE_API_NO &gt;= 20010901 STANDARD_MODULE_HEADER,#endif "myfirst",//扩展名称 NULL, /*Functions */ NULL, /*MINIT */ NULL, /*MSHUTDOWN */ NULL, /*RINIT */ NULL, /*RSHUTDOWN */ NULL, /*MINFO */#if ZEND_MODULE_API_NO &gt;= 20010901 "2.1",//扩展的版本#endif STANDARD_MODULE_PROPERTIES&#125;; #ifdef COMPILE_DL_MyfirstZEND_GET_MODULE(myfirst)#endif 3.扩展编译准备好了扩展需要编译的源文件，接下来需要的便是把它们编译成目标文件了。 第一步：根据config.m4文件使用phpize生成一个configure脚本、Makefile等文件： $ phpize PHP Api Version: 20041225 Zend Module Api No: 20050617 Zend Extension Api No: 220050617 现在查看扩展所在的目录，会发现phpize程序根据config.m4里的信息生成了许多编译php扩展必须的文件，比如makefiles等。 第二部：运行./configure脚本，然后执行make; make test即可。如果没有错误，那么在module文件夹下面便会生成扩展的目标文件 myfirst.so，这里由于之前我们在配置文件里写申明的是动态扩展，所以会被编译成动态库。 现在，先让我们执行一下PHP源码根目录下的./buildconf —force，再执行./configure –help命令。会发现myfirst扩展的信息已经出现了。 为了使PHP能够找到需要的扩展文件，我们需要把编译好的so文件复制到PHP的扩展目录下，并在php.ini中配置： extension_dir=/usr/local/lib/php/modules/ extension=myfirst.so 这样php就会在每次启动的时候自动加载我们的扩展了。 4.扩展功能函数编写前面我们已经生成好了一份扩展框架，但它是没有什么实际作用的，我们还需要编写具体的功能函数。 #definePHP_FUNCTION ZEND_FUNCTION #defineZEND_FUNCTION(name) ZEND_NAMED_FUNCTION(ZEND_FN(name)) #defineZEND_NAMED_FUNCTION(name) void name(INTERNAL_FUNCTION_PARAMETERS) #define ZEND_FN(name) zif_##name 其中zif是zend internal function的意思，zif前缀是可供PHP语言调用的函数在C语言中的函数名称前缀。 123456ZEND_FUNCTION(myfirst_hello)&#123; php_printf("HelloWorld!\\n");&#125; 上面的函数在C语言中宏展开后是这样的: 123456voidzif_myfirst_hello(INTERNAL_FUNCTION_PARAMETERS)&#123; php_printf("HelloWorld!\\n");&#125; 函数的功能已经实现了，但是还不能在程序中调用，因为这个函数还没有在扩展模块中注册。现在看下扩展中zend_module_entry myfirst_module_entry（它是联系C扩展与PHP语言的重要纽带）中/*Functions*/的值为NULL，这是之前还没有编写函数。现在我们可以将编写的函数赋值给它了，这个值需要是zend_function_entry[]类型： 1234567static zend_function_entrymyfirst_functions[] = &#123; ZEND_FE(myfirst_hello, NULL) &#123; NULL, NULL,NULL &#125;&#125;; 其中最后的{NULL,NULL,NULL}是固定不变的。ZEND_FE()宏函数是对myfirst_hello函数的一个声明，如果有多个函数，可以直接以类似的形式添加到{NULL,NULL,NULL}之前，注意每个之间不需要加逗号。确保一切无误后，我们替换掉zend_module_entry里的原有成员，现在应该是这样的： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950ZEND_FUNCTION(myfirst_hello)&#123; php_printf("HelloWorld!\\n");&#125; static zend_function_entrymyfirst_functions[] = &#123; ZEND_FE(myfirst_hello, NULL) &#123; NULL, NULL,NULL &#125;&#125;; zend_module_entrymyfirst_module_entry = &#123;#if ZEND_MODULE_API_NO &gt;= 20010901 STANDARD_MODULE_HEADER,#endif "myfirst",//扩展名称。 myfirst_functions,/* Functions */ NULL, /*MINIT */ NULL, /*MSHUTDOWN */ NULL, /*RINIT */ NULL, /*RSHUTDOWN */ NULL, /*MINFO */#if ZEND_MODULE_API_NO &gt;= 20010901 "2.1",//这个地方是我们扩展的版本#endif STANDARD_MODULE_PROPERTIES&#125;; 这样我们就完成扩展的一个简单功能，然后再重新configure、make、make test，并复制.so文件到extension dir目录。 最后写一个脚本在命令行测试，应该可以输出helloworld了。 12345&lt;?php myfirst_hello();?&gt; 原文：http://blog.csdn.net/heiyeshuwu/article/details/40041601]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[用 Redis 实现无序队列 LPUSH / LPOP]]></title>
    <url>%2F2014%2F10%2F03%2F%E7%94%A8-Redis--%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%BA%8F%E9%98%9F%E5%88%97-LPUSH--LPOP%2F</url>
    <content type="text"><![CDATA[在实际的开发当中，当系统需要使用简单的任务列表的时候，我们可以使用Redis来充当队列（因为Redis本来就自带队列，简单易用，效率也不低，免去使用MQ等麻烦）。 使用Redis的队列，我们要记住2个常用的命令 ： LPUSH &amp; LPOP 上面两个命令是不是很熟悉：PUSH 和 POP ，不错，其实就是这个英文，只是在前面加上L大写开头。 上例子（PHP）： 一、生产者： 1234567891011121314&lt;?php//需要Redis扩展，请自定搞定$redis = new Redis();//长连接$redis-&gt;pconnect('127.0.0.1", "6379");//写入单个信息$redis-&gt;LPush('message', 'a');//写入多个信息$redis-&gt;LPush('message','b','c','d');//关闭redis连接$redis-&gt;close();?&gt; 二、消费者: 12345678910111213141516171819&lt;?php$redis = new Redis();//还是长连接$redis-&gt;pconnect('127.0.0.1', 6379);//循环取出队列中的数据while(true) &#123; try &#123; //取出数据成功时 $data = $redis-&gt;LPOP('message'); //也可以使用阻塞型的函数：BLPOP //$redis-&gt;BLPOP('list1', 10) //等到超时时间为10秒 &#125; catch(Exception $e) &#123; //队列中什么都没有，继续运行 &#125;&#125;?&gt; 具体例子就如上面，其实还有其他关于 队列的 函数可以用，具体请参考： http://redisdoc.com/list/index.html]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 下如何使用 apt 批量删除软件]]></title>
    <url>%2F2014%2F08%2F28%2Fubuntu-%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-apt-%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[想删除 ubuntu 服务器下的所有 php5.4 的软件，例如：php5.4-cli, php5.4-fpm 等, 但是一个一个来删除，有点难度啊，所以，查了一下，可以使用一下方法： 1、直接 apt-get purge sudo apt-get purge php5.4* 2、apt-get purge + 筛选函数 sudo apt-get purge `dpkg -l | grep php5.4 | awk ‘{print $2}’ |tr “\n” “ “`]]></content>
      <categories>
        <category>Linux/Unix</category>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[REMOTE_ADDR，HTTP_CLIENT_IP，HTTP_X_FORWARDED_FOR 的区别]]></title>
    <url>%2F2014%2F07%2F23%2FREMOTE_ADDRHTTP_CLIENT_IPHTTP_X_FORWARDED_FOR-%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[看ecshop的lib_base.php的时候里面获取客户端真实ip的函数（real_ip），有许多情况的判断，主要判断客户端是否使用代理的情况，注意判断顺序，先判断客户端是否使用代理HTTP_X_FORWARDED_FOR 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/** * 获得用户的真实IP地址 * * @access public * @return string */function real_ip()&#123; static $realip = NULL; if ($realip !== NULL) &#123; return $realip; &#125; if (isset($_SERVER)) &#123; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) &#123; $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); /\* 取X-Forwarded-For中第一个非unknown的有效IP字符串 */ foreach ($arr AS $ip) &#123; $ip = trim($ip); if ($ip != 'unknown') &#123; $realip = $ip; break; &#125; &#125; &#125; elseif (isset($_SERVER['HTTP_CLIENT_IP'])) &#123; $realip = $_SERVER['HTTP_CLIENT_IP']; &#125; else &#123; if (isset($_SERVER['REMOTE_ADDR'])) &#123; $realip = $_SERVER['REMOTE_ADDR']; &#125; else &#123; $realip = '0.0.0.0'; &#125; &#125; &#125; else &#123; if (getenv('HTTP_X_FORWARDED_FOR')) &#123; $realip = getenv('HTTP_X_FORWARDED_FOR'); &#125; elseif (getenv('HTTP_CLIENT_IP')) &#123; $realip = getenv('HTTP_CLIENT_IP'); &#125; else &#123; $realip = getenv('REMOTE_ADDR'); &#125; &#125; preg_match("/[\\d\\.]&#123;7,15&#125;/", $realip, $onlineip); $realip = !empty($onlineip[0]) ? $onlineip[0] : '0.0.0.0'; return $realip;&#125; 一、没有使用代理服务器的情况： REMOTE_ADDR = 您的 IP HTTP_VIA = 没数值或不显示 HTTP_X_FORWARDED_FOR = 没数值或不显示 二、使用透明代理服务器的情况：Transparent Proxies REMOTE_ADDR = 最后一个代理服务器 IP HTTP_VIA = 代理服务器 IP HTTP_X_FORWARDED_FOR = 您的真实 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。 这类代理服务器还是将您的信息转发给您的访问对象，无法达到隐藏真实身份的目的。 三、使用普通匿名代理服务器的情况：Anonymous Proxies REMOTE_ADDR = 最后一个代理服务器 IP HTTP_VIA = 代理服务器 IP HTTP_X_FORWARDED_FOR = 代理服务器 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。 隐藏了您的真实IP，但是向访问对象透露了您是使用代理服务器访问他们的。 四、使用欺骗性代理服务器的情况：Distorting Proxies REMOTE_ADDR = 代理服务器 IP HTTP_VIA = 代理服务器 IP HTTP_X_FORWARDED_FOR = 随机的 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。 告诉了访问对象您使用了代理服务器，但编造了一个虚假的随机IP代替您的真实IP欺骗它。 五、使用高匿名代理服务器的情况：High Anonymity Proxies (Elite proxies) REMOTE_ADDR = 代理服务器 IP HTTP_VIA = 没数值或不显示 HTTP_X_FORWARDED_FOR = 没数值或不显示 ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。 完全用代理服务器的信息替代了您的所有信息，就象您就是完全使用那台代理服务器直接访问对象。 REMOTE_ADDR 是你的客户端跟你的服务器“握手”时候的IP。如果使用了“匿名代理”，REMOTE_ADDR将显示代理服务器的IP。 HTTP_CLIENT_IP 是代理服务器发送的HTTP头。如果是“超级匿名代理”，则返回none值。同样，REMOTE_ADDR也会被替换为这个代理服务器的IP。 $_SERVER[&apos;REMOTE_ADDR&apos;]; //访问端（有可能是用户，有可能是代理的）IP $_SERVER[&apos;HTTP_CLIENT_IP&apos;]; //代理端的（有可能存在，可伪造） $_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]; //用户是在哪个IP使用的代理（有可能存在，也可以伪造）]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MAC OSX下include头文件缺失引起的问题及解决办法: command line tools 安装]]></title>
    <url>%2F2014%2F07%2F13%2FMAC-OSX%E4%B8%8Binclude%E5%A4%B4%E6%96%87%E4%BB%B6%E7%BC%BA%E5%A4%B1%E5%BC%95%E8%B5%B7%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%3A-command-line-tools-%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装软件的时候可能出现缺少头文件而导致的安装失败，笔者就尝试过，在安装 pip install Scrapy 的时候，就出现过： Command “/usr/bin/python -c “import setuptools, tokenize;__file__=’/private/tmp/pip-build-UX3Es9/lxml/setup.py’;exec(compile(getattr(tokenize, ‘open’, open)(__file__).read().replace(‘\r\n’, ‘\n’), __file__, ‘exec’))” install –record /tmp/pip-VDXsGm-record/install-record.txt –single-version-externally-managed –compile” failed with error code 1 in /private/tmp/pip-build-UX3Es9/lxml 由此导致 安装 lxml 失败，所以安装 scrapy 失败，各种悲伤。 其实这是由于mac os 中缺少 c变异所需的include 头文件导致的，查看： cd /usr/目录下是否缺少 include 文件夹，如果没有，我们可以通过以下命令安装： xcode-select –install 执行这条命令后，会出现GUI界面安装程序哦，一直 下一步 下一步 就好，记得，必须在有网络的情况下能安装哦。]]></content>
      <categories>
        <category>mac</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[magento 1.8.0 的 nginx 配置]]></title>
    <url>%2F2014%2F06%2F26%2Fmagento-1.8.0-%E7%9A%84-nginx-%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[server { listen 80; server_name abc.com; rewrite / $scheme://www.$host$request_uri permanent; ## Forcibly prepend a www} server { listen 80; server_name www.abc.com; set $DOC_ROOT d:/abc.com/shop; root $DOC_ROOT; location / { index index.html index.php; ## Allow a static html file to be shown first try_files $uri $uri/ @handler; ## If missing pass the URI to Magento’s front handler expires 30d; ## Assume all files are cachable } ## These locations would be hidden by .htaccess normally location ^~ /app/ { deny all; } location ^~ /includes/ { deny all; } location ^~ /lib/ { deny all; } location ^~ /media/downloadable/ { deny all; } location ^~ /pkginfo/ { deny all; } location ^~ /report/config.xml { deny all; } location ^~ /var/ { deny all; } location /var/export/ { ## Allow admins only to view export folder auth_basic &quot;Restricted&quot;; ## Message shown in login window auth\_basic\_user_file htpasswd; ## See /etc/nginx/htpassword autoindex on; } location /. { ## Disable .htaccess and other hidden files return 404; } location @handler { ## Magento uses a common front handler rewrite / /index.php; } location ~ .php/ { ## Forward paths like /js/index.php/x.js to relevant handler rewrite ^(.*.php)/ $1 last; } location ~ .php$ { ## Execute PHP scripts if (!-e $request\_filename) { rewrite / /index.php last; } ## Catch 404s that try\_files miss expires off; ## Do not cache dynamic content fastcgi_pass 127.0.0.1:9000; fastcgi\_param SCRIPT\_FILENAME $document\_root$fastcgi\_script_name; fastcgi\_param MAGE\_RUN_CODE default; ## Store code is defined in administration &gt; Configuration &gt; Manage Stores fastcgi\_param MAGE\_RUN_TYPE store; include fastcgi\_params; ## See /etc/nginx/fastcgi\_params } location ~* ^.+\\.(jpg|jpeg|gif|css|png|js|ico)$ { root $DOC_ROOT; index index.php; access_log off; expires 30d; }]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>magento</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下防火墙的配置]]></title>
    <url>%2F2014%2F05%2F12%2Flinux%E4%B8%8B%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[如果大家是使用一键环境（如：lnmp.org)，有时候防火墙会被设置成正式环境一样，当你是用作测试服务器的时候，这样就很不方便了。 因此，在这里记录一下linux下防火墙的配置： 地址是：/etc/sysconfig/iptables # Firewall configuration written by system-config-firewall# Manual customization of this file is not recommended.*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -i eth0 -j ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT #这条是mysql的端口，正式服务器请注释这条-A INPUT -m state –state NEW -m tcp -p tcp –dport 6379 -j ACCEPT #这条是redis的端口，正式服务器请注释这条-A FORWARD -m state –state ESTABLISHED,RELATED -j ACCEPT-A FORWARD -p icmp -j ACCEPT-A FORWARD -i lo -j ACCEPT-A FORWARD -i eth0 -j ACCEPT-A INPUT -j REJECT –reject-with icmp-host-prohibited-A FORWARD -j REJECT –reject-with icmp-host-prohibitedCOMMIT]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[phpstorm mac 快捷键]]></title>
    <url>%2F2014%2F01%2F15%2Fphpstorm-mac-%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[最近发现phpstorm超级好用，对PHP5.4以上支持十分好，所以果断抛弃神奇的eclipse哈哈~ 好，记录一下mac下得各种快捷键呢: command + a 全选 command + c 复制 command + v 粘贴 command + z 撤消 command + f 代码搜索 command + l 输入行号跳到某一行 command + o 查看一个类的结构 command + / 单行注释 command + e 列出最后打开的文件 ctrl + shift + / 块注释 shift + command + x shift + command + r 按文件名搜索对应文件所在路径 shift + command + t 按类名搜索对应文件所在路径 shift + command + c 复制当前文件所在路径 command + delete 删除整行 option + comman +enter 下面增加一行 command + D 复制出一行 command + B 函数追踪，同comaand + 单击 control + tab 打开的文件间切换 control + shift + tab 向上切换 control + up/down 在打开的mac应用程序窗口之间切换 在写好的函数上面，/** 然后回车，可以生成php doc注释，这个和一些编辑器的敲tab略有不同 option + command + O 搜索项目中函数，变量或者其他的标示符 shift + command + o 搜索项目中的文件 command + o 搜索项目中的类文件 ^+space 可以在 输入/之后使用，提示出文件列表]]></content>
      <categories>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库MyISAM和InnoDB存储引擎的比较]]></title>
    <url>%2F2013%2F11%2F23%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93MyISAM%E5%92%8CInnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[MySQL有多种存储引擎，MyISAM和InnoDB是其中常用的两种。 MyISAM是MySQL的默认存储引擎，基于传统的ISAM类型，支持全文搜索，但不是事务安全的，而且不支持外键。每张MyISAM表存放在三个文件中：frm 文件存放表格定义；数据文件是MYD (MYData)；索引文件是MYI (MYIndex)。 InnoDB是事务型引擎，支持回滚、崩溃恢复能力、多版本并发控制、ACID事务，支持行级锁定（InnoDB表的行锁不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表，如like操作时的SQL语句），以及提供与Oracle类型一致的不加锁读取方式。InnoDB存储它的表和索引在一个表空间中，表空间可以包含数个文件。 主要区别： MyISAM是非事务安全型的，而InnoDB是事务安全型的。 MyISAM锁的粒度是表级，而InnoDB支持行级锁定。 MyISAM支持全文类型索引，而InnoDB不支持全文索引。 MyISAM相对简单，所以在效率上要优于InnoDB，小型应用可以考虑使用MyISAM。 MyISAM表是保存成文件的形式，在跨平台的数据转移中使用MyISAM存储会省去不少的麻烦。 InnoDB表比MyISAM表更安全，可以在保证数据不会丢失的情况下，切换非事务表到事务表（alter table tablename type=innodb）。 应用场景： MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择。 InnoDB用于事务处理应用程序，具有众多特性，包括ACID事务支持。如果应用中需要执行大量的INSERT或UPDATE操作，则应该使用InnoDB，这样可以提高多用户并发操作的性能。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>InnoDB</tag>
        <tag>MyISAM</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 中 varchar 和 char 的区别]]></title>
    <url>%2F2013%2F10%2F18%2Fmysql-%E4%B8%AD-varchar-%E5%92%8C-char-%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[在mysql教程中char与varchar的区别呢，都是用来存储字符串的，只是他们的保存方式不一样罢了，char有固定的长度，而varchar属于可变长的字符类型。 char与varchar的区别 char (13)长度固定， 如’www.jb51.net&#39; 存储需要空间 12个字符 varchar(13) 可变长 如’www.jb51.net&#39; 需要存储空间 13字符, 从上面可以看得出来char 长度是固定的，不管你存储的数据是多少他都会都固定的长度。而varchar则处可变长度但他要在总长度上加1字符，这个用来存储位置。所以实际应用中用户可以根据自己的数据类型来做。 再看看char,与varchar在速度上的区别吧。 mysal&gt;create tabe ab(v varchar(4),c char(4)); query ok ,0 rows affected(0.02 sec) mysql&gt;insert into abc values(‘ab ‘,’ab ‘) query ok ,1 row affected(0.00 sec); mysql-&gt;select concat(v ,’+’) ,concat(c ,’+’) form abc ab + | ab+ 1rows in set (0.00 sec) 从上面可以看出来，由于某种原因char 固定长度，所以在处理速度上要比varchar快速很多，但是对费存储空间，所以对存储不大，但在速度上有要求的可以使用char类型，反之可以用varchar类型来实例。 注明： 在用char字符类型时内容后面有空间时必须作相关处理，要不就会把空格自动删除。 建意: myisam 存储引擎 建议使用固定长度，数据列代替可变长度的数据列。 memory存储引擎 目前都使用固定数据行存储，因此无论使用char varchar列都没关系， innodb 存储引擎 建意使用varchar 类型 以下是其它网友的补充 char是一种固定长度的类型，varchar则是一种可变长度的类型 char(M)类型的数据列里，每个值都占用M个字节，如果某个长度小于M，MySQL就会在它的右边用空格字符补足．（在检索操作中那些填补出来的空格字符将被去掉）在varchar(M)类型的数据列里，每个值只占用刚好够用的字节再加上一个用来记录其长度的字节（即总长度为L+1字节）． 在MySQL中用来判断是否需要进行对据列类型转换的规则 １、在一个数据表里，如果每一个数据列的长度都是固定的，那么每一个数据行的长度也将是固定的． ２、只要数据表里有一个数据列的长度的可变的，那么各数据行的长度都是可变的． ３、如果某个数据表里的数据行的长度是可变的，那么，为了节约存储空间，MySQL会把这个数据表里的固定长度类型的数据列转换为相应的可变长度类型． 例外：长度小于４个字符的char数据列不会被转换为varchar类型 对于MyISAM表，尽量使用Char，对于那些经常需要修改而容易形成碎片的myisam和isam数据表就更是如此，它的缺点就是占用磁盘空间； 对于InnoDB表，因为它的数据行内部存储格式对固定长度的数据行和可变长度的数据行不加区分（所有数据行共用一个表头部分，这个标头部分存放着指向各有关数据列的指针），所以使用char类型不见得会比使用varchar类型好。事实上，因为char类型通常要比varchar类型占用更多的空间，所以从减少空间占用量和减少磁盘i/o的角度，使用varchar类型反而更有利. 文章2： 字符应该是最常见的一种了，但似乎各个数据库都有所不同，比如oracle中就有啥varchar2之类。不过mysql似乎最多的还是集中在char和varchar上。 说说区别。char是固定长度的，而varchar会根据具体的长度来使用存储空间。比如char(255)和varchar(255)，在存储字符串”hello world”的时候，char会用一块255的空间放那个11个字符，而varchar就不会用255个，他先计算长度后只用11个再加上计算的到字符串长度信息，一般1-2个byte来，这样varchar在存储不确定长度的时候会大大减少存储空间。 如此看来varchar比char聪明多了，那char有用武之地吗？还是很不少优势的。 一，存储很短的信息，比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个byte用于存储信息长度，本来打算节约存储的现在得不偿失。 二，固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。 三，十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。 还有一个关于varchar的问题是，varchar他既然可以自动适应存储空间，那我varchar(8)和varchar(255)存储应该都是一样的，那每次表设计的时候往大的方向去好了，免得以后不够用麻烦。这个思路对吗？答案是否定的。mysql会把表信息放到内存中（查询第一次后，就缓存住了，linux下很明显，但windows下似乎没有，不知道为啥），这时内存的申请是按照固定长度来的，如果varchar很大就会有问题。所以还是应该按需索取。 总结：仔细看DZ的数据表，定长的字段基本还都是用char…. 摘自：http://www.jb51.net/article/23575.htm]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySql 性能调试之 —— 开启慢查询日志]]></title>
    <url>%2F2013%2F10%2F04%2FMySql-%E6%80%A7%E8%83%BD%E8%B0%83%E8%AF%95%E4%B9%8B-%E2%80%94%E2%80%94-%E5%BC%80%E5%90%AF%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[一、查看当前服务器是否开启慢查询： 1、快速办法，运行sql语句show VARIABLES like “%slow%” 2、直接去my.conf中查看。 二、开启慢查询：在配置文件my.conf中配置 #记录地址 slow_query_log_file = /usr/local/mysql/var/slowquery.log #时间 long_query_time = 1 #单位是秒 #设置未启用索引的查询是否被记录 log_queries_not_using_indexes = 0 或者使用sql 语句来修改： set global slow_query_log_file = ‘/usr/local/mysql/var/slowquery.log’; set global slow_query_log = ON; set global long_query_time=1; #设置大于1s的sql语句记录下来 三、慢查询日志文件的信息格式： # Time: 130905 14:15:59 时间是2013年9月5日 14:15:59(前面部分容易看错哦,乍看以为是时间戳) # User@Host: root[root] @ [183.239.28.174] 请求mysql服务器的客户端ip # Query_time: 0.735883 Lock_time: 0.000078 Rows_sent: 262 Rows_examined: 262 这里表示执行用时多少秒，0.735883秒，1秒等于1000毫秒 SET timestamp=1378361759; 这目前我还不知道干嘛用的 show tables from `test_db`; 这个就是关键信息，指明了当时执行的是这条语句 四、调试： select sleep(0.13);]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP session 跨域解决方法]]></title>
    <url>%2F2013%2F09%2F04%2FPHP-session-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[web站点经常出现二级域名跨域的情况，例如：a.goodspb.net 、bbs.goodspb.net 这种情况！这个时候我们当然希望只要在www.goodspb.net登录之后在bbs.goodspb.net也同时登录了（用户系统一致的情况下）。因此，我们就需要另session跨域了！ 我觉得常用的session跨域有2种。 一、配置PHP设置： 而这种方式可以在应用中设置或者直接配置php.ini 1、在session_start()之前配置： 123ini_set('session.cookie_path', '/');ini_set('session.cookie_domain', '.goodspb.net');ini_set('session.cookie_lifetime', '1800'); 2、直接在php.ini配置（必须找到正确的php.ini哦，终端输入：php -i | grep php.ini） 123session.cookie_path = /session.cookie_domain = .goodspb.netsession.cookie_lifetime = 1800 以上是通过配置PHP达成session跨域的，当然，还能自己手动去保存session_id来达到跨域的效果 二、手动设置session_id 1、先保存session_id 1234567891011&lt;?phpsession_start();$_SESSION\['uid'\] = 1;//获取session_id$session\_id = session\_id();//然后保存起来，例如用mysql / cookie / redis 等?&gt; 2、然后到跨域处保存设置session_id 12345678&lt;?php//从mysql / cookie /redis 获取$session_id = '1234567890';session\_id($session\_id);session_start();?&gt;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>session</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在PHP中使用cURL上传文件]]></title>
    <url>%2F2013%2F07%2F30%2F%E5%9C%A8PHP%E4%B8%AD%E4%BD%BF%E7%94%A8cURL%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[最近在做一个接口，接口中需要上传文件，一看肯定是需要使用curl无疑，让我再次记录： 一、最简单的例子: 123456789101112131415161718// initialise the curl request$request = curl_init('http://example.com/');// send a filecurl\_setopt($request, CURLOPT\_POST, true);curl_setopt( $request, CURLOPT_POSTFIELDS, array( 'file' =&gt; '@' . realpath('example.txt') ));// output the responsecurl\_setopt($request, CURLOPT\_RETURNTRANSFER, true);echo curl_exec($request);// close the sessioncurl_close($request); 二、设置文件名： 123456curl_setopt( $request, CURLOPT_POSTFIELDS, array( 'file' =&gt; '@' . realpath('example.txt') . ';filename=name.txt' )); 三、如果是在 表单中上传的： 123456789curl_setopt( $request, CURLOPT_POSTFIELDS, array( 'file' =&gt; '@' . $\_FILES\['file'\]\['tmp\_name'\] . ';filename=' . $_FILES\['file'\]\['name'\] . ';type=' . $_FILES\['file'\]\['type'\] )); 在表单中上传则会 先将文件上传到服务器，然后再上传到curl的服务器]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>curl</tag>
        <tag>post</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 浮点数运算]]></title>
    <url>%2F2013%2F06%2F23%2FPHP-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[bcadd — 将两个高精度数字相加 bcsub — 将两个高精度数字相减 bccomp — 比较两个高精度数字，返回-1, 0, 1 bcdiv — 将两个高精度数字相除 bcmod — 求高精度数字余数 bcmul — 将两个高精度数字相乘 bcpow — 求高精度数字乘方 bcpowmod — 求高精度数字乘方求模，数论里非常常用 bcscale — 配置默认小数点位数，相当于就是Linux bc中的”scale=” bcsqrt — 求高精度数字平方根 例子： 123456789&lt;?php$a = '1.234';$b = '5';echo bcadd($a, $b); // 6echo bcadd($a, $b, 4); // 6.2340?&gt; 第三个参数说明：此可选参数用于设置结果中小数点后的小数位数。也可通过使用 bcscale() 来设置全局默认的小数位数，用于所有函数。 比较说明： 1234567&lt;?phpecho bccomp('1', '2') . "\\n"; // -1echo bccomp('1.00001', '1', 3); // 0echo bccomp('1.00001', '1', 5); // 1?&gt; 说明：如果两个数相等返回0, 左边的数比较右边的数大返回1, 否则返回-1.]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[php正则方法去除html标签或者javascript,css标签]]></title>
    <url>%2F2013%2F05%2F24%2Fphp%E6%AD%A3%E5%88%99%E6%96%B9%E6%B3%95%E5%8E%BB%E9%99%A4html%E6%A0%87%E7%AD%BE%E6%88%96%E8%80%85javascriptcss%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[方法一： 12345$str = "&lt;div style='color:red'&gt;test string&lt;/div&gt;&lt;br /&gt;&lt;p&gt;abc&lt;/p&gt;&lt;h1&gt;yyyyyyyyyy&lt;/h1&gt;&lt;a href=''&gt;222&lt;/a&gt;";$preg = "/&lt;\\/?\[^&lt;&gt;\]+&gt;/i";echo $str;echo '&lt;br/&gt;';echo preg_replace($preg,'',$str); 方法二:(去除多种) 123456789101112131415161718192021222324252627282930313233$search = array ("'&lt;script\[^&gt;\]*?&gt;.*?&lt;/script&gt;'si", // 去掉 javascript "'&lt;style\[^&gt;\]*?&gt;.*?&lt;/style&gt;'si", // 去掉 css "'&lt;\[/!\]*?\[^&lt;&gt;\]*?&gt;'si", // 去掉 HTML 标记 "'&lt;!--\[/!\]*?\[^&lt;&gt;\]*?&gt;'si", // 去掉 注释 标记 "'(\[rn\])\[s\]+'", // 去掉空白字符 "'&amp;(quot|#34);'i", // 替换 HTML 实体 "'&amp;(amp|#38);'i", "'&amp;(lt|#60);'i", "'&amp;(gt|#62);'i", "'&amp;(nbsp|#160);'i", "'&amp;(iexcl|#161);'i", "'&amp;(cent|#162);'i", "'&amp;(pound|#163);'i", "'&amp;(copy|#169);'i", "'&amp;#(d+);'e"); // 作为 PHP 代码运行 $replace = array ("", "", "", "", "\\1", "\\"", "&amp;", "&lt;", "&gt;", " ", chr(161), chr(162), chr(163), chr(169), "chr(\\1)");//$document为需要处理字符串，如果来源为文件可以$document = file\_get\_contents($filename);$out = preg_replace($search, $replace, $document); 也可以使用php的内置函数strip_tags()清除html,js,注释等标记]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP CURL 发起POST , GET , DELETE , PUT 请求]]></title>
    <url>%2F2013%2F04%2F19%2FPHP-CURL-%E5%8F%91%E8%B5%B7POST--GET--DELETE--PUT-%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829&lt;?php function api_request($URL,$type,$params,$headers)&#123; $ch = curl_init(); //初始化curl，还应该判断一下是否包含curl这个函数 $timeout = 5; //设置过期时间 curl\_setopt($ch, CURLOPT\_URL, $URL); //发贴地址 if($headers!="")&#123; curl\_setopt($ch, CURLOPT\_HTTPHEADER, $headers); &#125;else &#123; curl\_setopt($ch, CURLOPT\_HTTPHEADER, array('Content-type: text/json')); &#125; curl\_setopt($ch, CURLOPT\_RETURNTRANSFER, 1); //以文件流的形式返回 curl\_setopt($ch, CURLOPT\_CONNECTTIMEOUT, $timeout); switch ($type)&#123; case "GET" : curl\_setopt($ch, CURLOPT\_HTTPGET, true);break; case "POST": curl\_setopt($ch, CURLOPT\_POST,true); curl\_setopt($ch, CURLOPT\_POSTFIELDS,$params);break; case "PUT" : curl\_setopt ($ch, CURLOPT\_CUSTOMREQUEST, "PUT"); curl\_setopt($ch, CURLOPT\_POSTFIELDS,$params);break; case "DELETE":curl\_setopt ($ch, CURLOPT\_CUSTOMREQUEST, "DELETE"); curl\_setopt($ch, CURLOPT\_POSTFIELDS,$params);break; &#125; $file\_contents = curl\_exec($ch);//获得返回值 return $file_contents; curl_close($ch); &#125;?&gt;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[RSA算法类]]></title>
    <url>%2F2013%2F02%2F23%2FRSA%E7%AE%97%E6%B3%95%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[RSA可谓是可逆算法中最最常用的，再次摘抄一个小类~ 通过openssl实现的签名、验签、非对称加解密，需要配合x.509证书（如crt和pem）文件使用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213&lt;?php /** * RSA算法类 * 签名及密文编码：base64字符串/十六进制字符串/二进制字符串流 * 填充方式: PKCS1Padding（加解密）/NOPadding（解密） * * Notice:Only accepts a single block. Block size is equal to the RSA key size! * 如密钥长度为1024 bit，则加密时数据需小于128字节，加上PKCS1Padding本身的11字节信息，所以明文需小于117字节 * * @author: linvo * @version: 1.0.0 * @date: 2013/1/23 */ class RSA&#123; private $pubKey = null; private $priKey = null; /** * 自定义错误处理 */ private function _error($msg)&#123; die('RSA Error:' . $msg); //TODO &#125; /** * 构造函数 * * @param string 公钥文件（验签和加密时传入） * @param string 私钥文件（签名和解密时传入） */ public function __construct($public_key_file = '', $private_key_file = '')&#123; if ($public_key_file)&#123; $this-&gt;_getPublicKey($public_key_file); &#125; if ($private_key_file)&#123; $this-&gt;_getPrivateKey($private_key_file); &#125; &#125; /** * 生成签名 * * @param string 签名材料 * @param string 签名编码（base64/hex/bin） * @return 签名值 */ public function sign($data, $code = 'base64')&#123; $ret = false; if (openssl_sign($data, $ret, $this-&gt;priKey))&#123; $ret = $this-&gt;_encode($ret, $code); &#125; return $ret; &#125; /** * 验证签名 * * @param string 签名材料 * @param string 签名值 * @param string 签名编码（base64/hex/bin） * @return bool */ public function verify($data, $sign, $code = 'base64')&#123; $ret = false; $sign = $this-&gt;_decode($sign, $code); if ($sign !== false) &#123; switch (openssl_verify($data, $sign, $this-&gt;pubKey))&#123; case 1: $ret = true; break; case 0: case -1: default: $ret = false; &#125; &#125; return $ret; &#125; /** * 加密 * * @param string 明文 * @param string 密文编码（base64/hex/bin） * @param int 填充方式（貌似php有bug，所以目前仅支持OPENSSL_PKCS1_PADDING） * @return string 密文 */ public function encrypt($data, $code = 'base64', $padding = OPENSSL_PKCS1_PADDING)&#123; $ret = false; if (!$this-&gt;_checkPadding($padding, 'en')) $this-&gt;_error('padding error'); if (openssl_public_encrypt($data, $result, $this-&gt;pubKey, $padding))&#123; $ret = $this-&gt;_encode($result, $code); &#125; return $ret; &#125; /** * 解密 * * @param string 密文 * @param string 密文编码（base64/hex/bin） * @param int 填充方式（OPENSSL_PKCS1_PADDING / OPENSSL_NO_PADDING） * @param bool 是否翻转明文（When passing Microsoft CryptoAPI-generated RSA cyphertext, revert the bytes in the block） * @return string 明文 */ public function decrypt($data, $code = 'base64', $padding = OPENSSL_PKCS1_PADDING, $rev = false)&#123; $ret = false; $data = $this-&gt;_decode($data, $code); if (!$this-&gt;_checkPadding($padding, 'de')) $this-&gt;_error('padding error'); if ($data !== false)&#123; if (openssl_private_decrypt($data, $result, $this-&gt;priKey, $padding))&#123; $ret = $rev ? rtrim(strrev($result), "\\0") : ''.$result; &#125; &#125; return $ret; &#125; // 私有方法 /** * 检测填充类型 * 加密只支持PKCS1_PADDING * 解密支持PKCS1_PADDING和NO_PADDING * * @param int 填充模式 * @param string 加密en/解密de * @return bool */ private function _checkPadding($padding, $type)&#123; if ($type == 'en')&#123; switch ($padding)&#123; case OPENSSL_PKCS1_PADDING: $ret = true; break; default: $ret = false; &#125; &#125; else &#123; switch ($padding)&#123; case OPENSSL_PKCS1_PADDING: case OPENSSL_NO_PADDING: $ret = true; break; default: $ret = false; &#125; &#125; return $ret; &#125; private function _encode($data, $code)&#123; switch (strtolower($code))&#123; case 'base64': $data = base64_encode(''.$data); break; case 'hex': $data = bin2hex($data); break; case 'bin': default: &#125; return $data; &#125; private function _decode($data, $code)&#123; switch (strtolower($code))&#123; case 'base64': $data = base64_decode($data); break; case 'hex': $data = $this-&gt;_hex2bin($data); break; case 'bin': default: &#125; return $data; &#125; private function _getPublicKey($file)&#123; $key_content = $this-&gt;_readFile($file); if ($key_content)&#123; $this-&gt;pubKey = openssl_get_publickey($key_content); &#125; &#125; private function _getPrivateKey($file)&#123; $key_content = $this-&gt;_readFile($file); if ($key_content)&#123; $this-&gt;priKey = openssl_get_privatekey($key_content); &#125; &#125; private function _readFile($file)&#123; $ret = false; if (!file_exists($file))&#123; $this-&gt;_error("The file &#123;$file&#125; is not exists"); &#125; else &#123; $ret = file_get_contents($file); &#125; return $ret; &#125; private function _hex2bin($hex = false)&#123; $ret = $hex !== false &amp;&amp; preg_match('/^[0-9a-fA-F]+$/i', $hex) ? pack("H*", $hex) : false; return $ret; &#125; &#125;?&gt; Demo： 1234567891011121314151617181920212223&lt;?php header('Content-Type:text/html;Charset=utf-8;'); include "rsa.php"; echo '&lt;pre&gt;'; $a = isset($_GET['a']) ? $_GET['a'] : '测试123'; ////////////////////////////////////// $pubfile = 'E:\\ssl\\cert\\pwd.crt'; $prifile = 'E:\\ssl\\cert\\pwd.pem'; $m = new RSA($pubfile, $prifile); $x = $m-&gt;sign($a); $y = $m-&gt;verify($a, $x); var_dump($x, $y); $x = $m-&gt;encrypt($a); $y = $m-&gt;decrypt($x); var_dump($x, $y);?&gt;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>openssl</tag>
        <tag>RSA</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx下WordPress只显示一个默认主题]]></title>
    <url>%2F2013%2F02%2F03%2Fnginx%E4%B8%8BWordPress%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E4%B8%AA%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[用lnmp一键安装包在CentOS中架了一个博客站，安装完WordPress之后，准备给博客换一个主题，但是在后台只显示一个主题，其他官方主题都不显示了。 刚开始以为是wordpress新版本的问题，不管安装什么主题都只显示一个，安装同一个提示安装的目录有存在。开始以为是文件夹权限问题，重新设置了下发现还是只显示一个主题，后来通过搜索发现原来是php.ini禁止了scandir函数。 翻看php手册，scandir() 函数是这样被定义的：“scandir() 函数返回一个数组，其中包含指定路径中的文件和目录”，wordpress可能居于这个函数去开发的，所以就只显示了一个主题。 由于我装的是lnmp的安装包，其中禁用了部分危险函数：“passthru, exec, system, chroot, scandir, chgrp, chown, shell_exec, proc_open, proc_get_status, ini_alter, ini_alter, ini_restore, dl, pfsockopen”，而scandir函数也在此列，所以这样问题的解决方法只能是将scandir从禁用函数剔除就可以了。 我们可以通过登录到Xshell 或是putty来修改/usr/local/php/etc下的php.ini文件，然后重启一下php进程“ service php-fpm restart 或 /etc/init.d/php-fpm restart ”就可以了。]]></content>
      <categories>
        <category>wordpress</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[/bin, /sbin, /usr/bin, /usr/sbin 有何区别]]></title>
    <url>%2F2012%2F10%2F07%2Fbin-sbin-usrbin-usrsbin-%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[相信配置过系统 PATH 的人都知道 /bin, /sbin, /usr/bin, /usr/sbin ，bash在寻找二进制文件的时候有加载的顺序，它们之间有何不同呢？ /bin：是系统的一些指令。bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等 /sbin：一般是指超级用户指令。主要放置一些系统管理的必备程式例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、 ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、 runlevel、shutdown等 /usr/bin：是你在后期安装的一些软件的运行脚本。主要放置一些应用软体工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome、 gzip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb、wget等 /usr/sbin ：放置一些用户安装的系统管理的必备程式例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySql集群：实现读写分离]]></title>
    <url>%2F2012%2F09%2F13%2FMySql%E9%9B%86%E7%BE%A4%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[一个完整的mysql读写分离环境包括以下几个部分： 应用程序client database proxy database集群 在本次实战中，应用程序client基于c3p0连接后端的database proxy。database proxy负责管理client实际访问database的路由策略，采用开源框架amoeba。database集群采用mysql的master-slave的replication方案。整个环境的结构图如下所示： 实战步骤与详解 一.搭建mysql的master-slave环境 1）分别在host1（10.20.147.110）和host2（10.20.147.111）上安装mysql（5.0.45），具体安装方法可见官方文档 2）配置master 首先编辑/etc/my.cnf，添加以下配置： log-bin=mysql-bin #slave会基于此log-bin来做replication server-id=1 #master的标示 binlog-do-db = amoeba_study #用于master-slave的具体数据库 然后添加专门用于replication的用户： mysql&gt; GRANT REPLICATION SLAVE ON . TO repl@10.20.147.111 IDENTIFIED BY ‘111111’; 重启mysql，使得配置生效： /etc/init.d/mysqld restart 最后查看master状态： 3）配置slave 首先编辑/etc/my.cnf，添加以下配置： server-id=2 #slave的标示 配置生效后，配置与master的连接： mysql&gt; CHANGE MASTER TO -&gt; MASTER_HOST=’10.20.147.110’, -&gt; MASTER_USER=’repl’, -&gt; MASTER_PASSWORD=’111111’, -&gt; MASTER_LOG_FILE=’mysql-bin.000003’, -&gt; MASTER_LOG_POS=161261; 其中MASTER_HOST是master机的ip，MASTER_USER和MASTER_PASSWORD就是我们刚才在master上添加的用户，MASTER_LOG_FILE和MASTER_LOG_POS对应与master status里的信息 最后启动slave： mysql&gt; start slave; 4）验证master-slave搭建生效 通过查看slave机的log（/var/log/mysqld.log）： 100703 10:51:42 [Note] Slave I/O thread: connected to master &#39;repl@10.20.147.110:3306’, replication started in log ‘mysql-bin.000003’ at position 161261 如看到以上信息则证明搭建成功，如果有问题也可通过此log找原因 二.搭建database proxy 此次实战中database proxy采用amoeba ，它的相关信息可以查阅官方文档，不在此详述 1）安装amoeba 下载amoeba（1.2.0-GA）后解压到本地（D:/openSource/amoeba-mysql-1.2.0-GA），即完成安装 2）配置amoeba 先配置proxy连接和与各后端mysql服务器连接信息（D:/openSource/amoeba-mysql-1.2.0-GA/conf/amoeba.xml）： &lt;!-- proxy server绑定的端口 –&gt; 8066 &lt;!-- proxy server绑定的IP –&gt; &lt;!-- 127.0.0.1 --&gt; &lt;!-- proxy server net IO Read thread size –&gt; 20 &lt;!-- proxy server client process thread size –&gt; 30 &lt;!-- mysql server data packet process thread size –&gt; 30 &lt;!-- socket Send and receive BufferSize(unit:K) –&gt; 128 &lt;!-- Enable/disable TCP_NODELAY (disable/enable Nagle’s algorithm). –&gt; true &lt;!-- 对外验证的用户名 –&gt; root &lt;!-- 对外验证的密码 –&gt; root 以上是proxy提供给client的连接配置： &lt;!-- PoolableObjectFactory实现类 –&gt; defaultManager &lt;!-- 真实mysql数据库端口 –&gt; 3306 &lt;!-- 真实mysql数据库IP –&gt; 10.20.147.110 amoeba_study &lt;!-- 用于登陆mysql的用户名 –&gt; root &lt;!-- 用于登陆mysql的密码 –&gt; &lt;!-- ObjectPool实现类 –&gt; 200 200 10 600000 600000 true true &lt;!-- PoolableObjectFactory实现类 –&gt; defaultManager &lt;!-- 真实mysql数据库端口 –&gt; 3306 &lt;!-- 真实mysql数据库IP –&gt; 10.20.147.111 amoeba_study &lt;!-- 用于登陆mysql的用户名 –&gt; root &lt;!-- 用于登陆mysql的密码 –&gt; &lt;!-- ObjectPool实现类 –&gt; 200 200 10 600000 600000 true true 以上是proxy与后端各mysql数据库服务器配置信息，具体配置见注释很明白了 最后配置读写分离策略： 1500 server1 server1 server2 true 从以上配置不然发现，写操作路由到server1（master），读操作路由到server2（slave） 3）启动amoeba 在命令行里运行D:/openSource/amoeba-mysql-1.2.0-GA/amoeba.bat即可： log4j:WARN log4j config load completed from file:D:/openSource/amoeba-mysql-1.2.0-GA/conf/log4j.xml log4j:WARN ip access config load completed from file:D:/openSource/amoeba-mysql-1.2.0-GA/conf/access_list.conf 2010-07-03 09:55:33,821 INFO net.ServerableConnectionManager - Server listening on 0.0.0.0/0.0.0.0:8066. 三.client端调用与测试 1）编写client调用程序 具体程序细节就不详述了，只是一个最普通的基于mysql driver的jdbc的数据库操作程序 2）配置数据库连接 本client基于c3p0，具体数据源配置如下： 值得注意是，client端只需连到proxy，与实际的数据库没有任何关系，因此jdbcUrl、user、password配置都对应于amoeba暴露出来的配置信息 3）调用与测试 首先插入一条数据：insert into zone_by_id(id,name) values(20003,’name_20003’) 通过查看master机上的日志/var/lib/mysql/mysql_log.log： 100703 11:58:42 1 Query set names latin1 1 Query SET NAMES latin1 1 Query SET character_set_results = NULL 1 Query SHOW VARIABLES 1 Query SHOW COLLATION 1 Query SET autocommit=1 1 Query SET sql_mode=’STRICT_TRANS_TABLES’ 1 Query SHOW VARIABLES LIKE ‘tx_isolation’ 1 Query SHOW FULL TABLES FROM `amoeba_study` LIKE ‘PROBABLYNOT’ 1 Prepare [1] insert into zone_by_id(id,name) values(?,?) 1 Prepare [2] insert into zone_by_id(id,name) values(?,?) 1 Execute [2] insert into zone_by_id(id,name) values(20003,’name_20003’) 得知写操作发生在master机上 通过查看slave机上的日志/var/lib/mysql/mysql_log.log： 100703 11:58:42 2 Query insert into zone_by_id(id,name) values(20003,’name_20003’) 得知slave同步执行了这条语句 然后查一条数据：select t.name from zone_by_id t where t.id = 20003 通过查看slave机上的日志/var/lib/mysql/mysql_log.log： 100703 12:02:00 33 Query set names latin1 33 Prepare [1] select t.name from zone_by_id t where t.id = ? 33 Prepare [2] select t.name from zone_by_id t where t.id = ? 33 Execute [2] select t.name from zone_by_id t where t.id = 20003 得知读操作发生在slave机上 并且通过查看slave机上的日志/var/lib/mysql/mysql_log.log发现这条语句没在master上执行 通过以上验证得知简单的master-slave搭建和实战得以生效。 摘自原文：http://blog.csdn.net/cutesource/article/details/5710645]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux写创建用户组和用户]]></title>
    <url>%2F2012%2F08%2F05%2FLinux%E5%86%99%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7%2F</url>
    <content type="text"><![CDATA[当你自行编译 php 的时候，很多时候需要指定启动 php-fpm 的 group 和 user ，这个时候，我们就需要自行创建用户和组了，这里做个记录，怎么在linux下创建用户组和用户。 我需要的事创建用户组: www， 用户: www 一、创建用户组sudo groupadd www www 就是你需要创建的用户组的名称，我这里是直接创建组名为 www 的用户组 二、创建用户sudo useradd www -m -s /sbin/nologin -d /home/www -g www 参数解释： -s /sbin/nologin 设置不能该用户登陆。假如需要用户可以登陆，可以设置： -s /bin/bash www-d 设置用户主目录-g 用户组-m 创建用户目录 三、useradd 参数详解执行： useradd –help Usage: useradd [options] LOGIN useradd -D useradd -D [options] Options: -b, –base-dir BASE_DIR base directory for the home directory of the new account -c, –comment COMMENT GECOS field of the new account -d, –home-dir HOME_DIR home directory of the new account -D, –defaults print or change default useradd configuration -e, –expiredate EXPIRE_DATE expiration date of the new account -f, –inactive INACTIVE password inactivity period of the new account -g, –gid GROUP name or ID of the primary group of the new account -G, –groups GROUPS list of supplementary groups of the new account -h, –help display this help message and exit -k, –skel SKEL_DIR use this alternative skeleton directory -K, –key KEY=VALUE override /etc/login.defs defaults -l, –no-log-init do not add the user to the lastlog and faillog databases -m, –create-home create the user’s home directory -M, –no-create-home do not create the user’s home directory -N, –no-user-group do not create a group with the same name as the user -o, –non-unique allow to create users with duplicate (non-unique) UID -p, –password PASSWORD encrypted password of the new account -r, –system create a system account -R, –root CHROOT_DIR directory to chroot into -s, –shell SHELL login shell of the new account -u, –uid UID user ID of the new account -U, –user-group create a group with the same name as the user -Z, –selinux-user SEUSER use a specific SEUSER for the SELinux user mapping –extrausers Use the extra users database 四、为用户设置密码sudo passwd www 五、更改用户属性sudo usermod -s /bin/bash username 使用 usermod 来更改用户的属性，这里的命令代表：使用户可以登陆。 六、如何删除用户组或者用户#删除用户组sudo groupdel www #删除用户sudo userdel www ps: 需要先删除用户，再删除用户组。 Have fun!]]></content>
      <categories>
        <category>Linux/Unix</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP正则表达式 /i, /is, /s, /isU 等结尾的解析]]></title>
    <url>%2F2012%2F05%2F15%2FPHP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-i-is-s-isU-%E7%AD%89%E7%BB%93%E5%B0%BE%E7%9A%84%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[PHP使用正则表达的时候，常常会出现： /^\w*$/i 这样的情况，那究竟结尾的i 代表什么呢？ i ：匹配大小写 s ：模式中的圆点元字符（.）匹配所有的字符，包括换行符 x ：模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的 # 以及下一个换行符之间的所有字符，包括两 头，也都被忽略 A： (PCRE_ANCHORED) 如果设定了此修正符，模式被强制为“anchored”，即强制仅从目标字符串的开头开始匹配即自动在模式开头加上^。 D ：(PCRE_DOLLAR_ENDONLY) 如果设定了此修正符，模式中的美元元字符仅匹配目标字符串的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前（但不会匹配 任何其它换行符之前）。如果设定了 m 修正符则忽略此选项。Perl 中没有与其等价的修正符。 S 当一个模式将被使用若干次时，为加速匹配起见值得先对其进行分析。如果设定了此修正符则会进行额外的分析。目前，分析一个模式仅对没有单一固定起始字符的 non-anchored 模式有用。 U： (PCRE_UNGREEDY) 本修正符反转了匹配数量的值使其不是默认的重复，而变成在后面跟上“?”才变得重复。这和 Perl 不兼容。也可以通过在模式之中设定 (?U) 修正符来启用此选项。 X： (PCRE_EXTRA) 此 修正符启用了一个 PCRE 中与 Perl 不兼容的额外功能。模式中的任何反斜线后面跟上一个没有特殊意义的字母导致一个错误，从而保留此组合以备将 来扩充。默认情况下，和 Perl 一样，一个反斜线后面跟一个没有特殊意义的字母被当成该字母本身。当前没有其它特性受此修正符控制。即:贪婪模式,最 大限度匹配 如:/a[\w]+?e/U匹配abceadeddd中的abceade而不是abce,如果不加U修正,则匹配abce u (PCRE_UTF8) 此修正符启用了一个 PCRE 中与 Perl 不兼容的额外功能。模式字符串被当成 UTF-8。本修正符在 Unix 下自 PHP 4.1.0 起可用，在 win32 下自 PHP 4.2.3 起可用。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP 文件夹遍历]]></title>
    <url>%2F2012%2F05%2F04%2FPHP-%E6%96%87%E4%BB%B6%E5%A4%B9%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[直上代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?php/* * 第一种实现办法：用dir返回对象 */function tree($directory) &#123; $mydir = dir($directory); while($file = $mydir-&gt;read()) &#123; if((is_dir("$directory/$file")) AND ($file!=".") AND ($file!="..")) &#123; //递归子文件夹 tree("$directory/$file"); &#125; else &#123; echo "&lt;li&gt;$file&lt;/li&gt;\\n"; &#125; &#125; $mydir-&gt;close(); &#125; //开始运行tree("D:/www/data"); /* * 第二种实现办法：用readdir()函数 */function listDir($dir)&#123; if(is_dir($dir)) &#123; if ($dh = opendir($dir)) &#123; while (($file = readdir($dh)) !== false) &#123; if((is_dir($dir."/".$file)) &amp;&amp; $file!="." &amp;&amp; $file!="..") &#123; //递归子文件夹 listDir($dir."/".$file."/"); &#125; else &#123; if($file!="." &amp;&amp; $file!="..") &#123; echo $file."&lt;br&gt;"; &#125; &#125; &#125; //处理完毕关闭文件夹句柄 closedir($dh); &#125; &#125;&#125;//开始运行listDir("D:/www/data");?&gt;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
</search>
